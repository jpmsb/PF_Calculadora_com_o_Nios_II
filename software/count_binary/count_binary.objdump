
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010238

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000034f0 memsz 0x000034f0 flags r-x
    LOAD off    0x00004510 vaddr 0x00013510 paddr 0x00013820 align 2**12
         filesz 0x00000310 memsz 0x00000310 flags rw-
    LOAD off    0x00004b30 vaddr 0x00013b30 paddr 0x00013b30 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000031a0  00010238  00010238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  000133d8  000133d8  000043d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000310  00013510  00013820  00004510  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00013b30  00013b30  00004b30  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00013c50  00013c50  00004820  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006e0  00000000  00000000  00004850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000a026  00000000  00000000  00004f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003614  00000000  00000000  0000ef56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000486a  00000000  00000000  0001256a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000f54  00000000  00000000  00016dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000228a  00000000  00000000  00017d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001bba  00000000  00000000  00019fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001bb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000300  00000000  00000000  0001bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0001ddde  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0001dde1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001dde8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001dde9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001ddea  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001ddee  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001ddf2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001ddf6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001ddff  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001de08  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0001de11  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000045  00000000  00000000  0001de17  2**0
                  CONTENTS, READONLY
 29 .jdi          00004677  00000000  00000000  0001de5c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00047b7e  00000000  00000000  000224d3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010238 l    d  .text	00000000 .text
000133d8 l    d  .rodata	00000000 .rodata
00013510 l    d  .rwdata	00000000 .rwdata
00013b30 l    d  .bss	00000000 .bss
00013c50 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_binary_bsp//obj/HAL/src/crt0.o
00010280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 count_binary.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010a7c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00013510 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
000112b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011698 l     F .text	00000034 alt_dev_reg
000135f4 l     O .rwdata	0000002c jtag_uart
00013620 l     O .rwdata	0000002c lcd_16x2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000119b0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00012104 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001225c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012288 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000126c8 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000127f4 l     F .text	0000003c alt_get_errno
00012830 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
000132a4 l     F .text	0000003c alt_get_errno
00013b48 g     O .bss	00000004 alt_instruction_exception_handler
00012f8c g     F .text	00000018 putchar
000113a0 g     F .text	0000006c alt_main
00013b50 g     O .bss	00000100 alt_irq
00013820 g       *ABS*	00000000 __flash_rwdata_start
00011b24 g     F .text	00000040 alt_up_character_lcd_send_cmd
00011084 g     F .text	00000060 memmove
00012c40 g     F .text	00000024 altera_nios2_gen2_irq_init
00011ab0 g     F .text	00000074 get_DDRAM_addr
00010fec g     F .text	00000098 __sfvwrite_small_str
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013b4c g     O .bss	00000004 errno
00013b34 g     O .bss	00000004 alt_argv
0001b7f4 g       *ABS*	00000000 _gp
00011668 g     F .text	00000030 usleep
00013674 g     O .rwdata	00000180 alt_fd_list
00012f84 g     F .text	00000008 _putchar_r
0001236c g     F .text	00000090 alt_find_dev
00011cd4 g     F .text	00000050 alt_up_character_lcd_write_fd
00012778 g     F .text	0000007c alt_io_redirect
00012e9c g     F .text	00000098 alt_exception_cause_generated_bad_addr
00011830 g     F .text	000000ec altera_avalon_jtag_uart_read
000111f4 g     F .text	00000064 .hidden __udivsi3
00012e0c g     F .text	00000090 alt_icache_flush
0001380c g     O .rwdata	00000004 alt_max_fd
000137f4 g     O .rwdata	00000004 _global_impure_ptr
00013c50 g       *ABS*	00000000 __bss_end
000125e0 g     F .text	000000e8 alt_iic_isr_register
00012b38 g     F .text	00000108 alt_tick
00012594 g     F .text	0000004c alt_ic_irq_enabled
000103c0 g     F .text	0000003c ler_operacao
00012a94 g     F .text	000000a4 alt_alarm_stop
00013b3c g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000100fc g     F .exceptions	000000c8 alt_irq_handler
0001364c g     O .rwdata	00000028 alt_dev_null
00011f74 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00012210 g     F .text	0000004c alt_dcache_flush_all
00013820 g       *ABS*	00000000 __ram_rwdata_end
00013804 g     O .rwdata	00000008 alt_dev_list
000132e0 g     F .text	000000f8 write
00013120 g     F .text	00000054 _putc_r
00013510 g       *ABS*	00000000 __ram_rodata_end
00011258 g     F .text	0000005c .hidden __umodsi3
00013c50 g       *ABS*	00000000 end
000101c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00011a2c g     F .text	00000084 alt_avalon_timer_sc_init
0001191c g     F .text	00000094 altera_avalon_jtag_uart_write
00011bd8 g     F .text	00000080 alt_up_character_lcd_write
000109ac g     F .text	00000060 _sprintf_r
0001140c g     F .text	0000022c alt_printf
00012fa4 g     F .text	0000012c __call_exitprocs
00010284 g     F .text	000000a0 calcula
00010238 g     F .text	0000004c _start
00013b40 g     O .bss	00000004 _alt_tick_rate
00013b44 g     O .bss	00000004 _alt_nticks
00011708 g     F .text	00000068 alt_sys_init
00011e24 g     F .text	0000008c alt_up_character_lcd_shift_display
00011eb0 g     F .text	0000008c alt_up_character_lcd_erase_pos
00013510 g       *ABS*	00000000 __ram_rwdata_start
000133d8 g       *ABS*	00000000 __ram_rodata_start
00011770 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012d6c g     F .text	000000a0 alt_get_fd
00011fac g     F .text	00000158 alt_busy_sleep
00012f54 g     F .text	00000030 memcmp
00013c50 g       *ABS*	00000000 __alt_stack_base
000104fc g     F .text	000000bc traduz_operador_extenso
00012c64 g     F .text	00000108 alt_find_file
000122c4 g     F .text	000000a8 alt_dev_llist_insert
00010ae8 g     F .text	000004ec ___svfprintf_internal_r
00013174 g     F .text	000000a8 __sfvwrite_small_dev
00013b30 g       *ABS*	00000000 __bss_start
000105b8 g     F .text	000003f4 main
00013b38 g     O .bss	00000004 alt_envp
000117d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010390 g     F .text	00000030 ler_operando
00011d98 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00010324 g     F .text	0000006c limpa_lcd
00013810 g     O .rwdata	00000004 alt_errno
000130d0 g     F .text	00000050 putc
00011100 g     F .text	00000080 .hidden __divsi3
00011b9c g     F .text	0000003c alt_up_character_lcd_open_dev
00011b64 g     F .text	00000038 alt_up_character_lcd_init
000133d8 g       *ABS*	00000000 __flash_rodata_start
000116cc g     F .text	0000003c alt_irq_init
00012a3c g     F .text	00000058 alt_release_fd
00010a0c g     F .text	00000070 sprintf
00011f3c g     F .text	00000038 alt_up_character_lcd_cursor_off
0001321c g     F .text	00000050 _write_r
000137f8 g     O .rwdata	00000004 _impure_ptr
00013b30 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000137fc g     O .rwdata	00000008 alt_fs_list
00010fd4 g     F .text	00000018 __vfprintf_internal_unused
000103fc g     F .text	00000044 ler_enter
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012430 g     F .text	00000050 alt_ic_isr_register
00013820 g       *ABS*	00000000 _edata
00013c50 g       *ABS*	00000000 _end
00010238 g       *ABS*	00000000 __ram_exceptions_end
00010440 g     F .text	000000bc traduz_operador
00012508 g     F .text	0000008c alt_ic_irq_disable
00012f34 g     F .text	00000020 exit
00011180 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011c58 g     F .text	0000007c alt_up_character_lcd_string
0001326c g     F .text	00000038 _exit
000110e4 g     F .text	0000001c strlen
000128e8 g     F .text	00000154 open
00011638 g     F .text	00000030 alt_putchar
000123fc g     F .text	00000034 alt_icache_flush_all
00011d24 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00013814 g     O .rwdata	00000004 alt_priority_mask
00012480 g     F .text	00000088 alt_ic_irq_enable
00013818 g     O .rwdata	00000008 alt_alarm_list
00012140 g     F .text	000000d0 close
0001131c g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08408e14 	ori	at,at,568
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	00800074 	movhi	r2,1
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10ced417 	ldw	r3,15184(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	00800074 	movhi	r2,1
   1015c:	2085883a 	add	r2,r4,r2
   10160:	108ed517 	ldw	r2,15188(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101d8:	000531fa 	rdctl	r2,exception
   101dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101e0:	e0bfff17 	ldw	r2,-4(fp)
   101e4:	1004d0ba 	srli	r2,r2,2
   101e8:	108007cc 	andi	r2,r2,31
   101ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101f0:	0005333a 	rdctl	r2,badaddr
   101f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f8:	d0a0d517 	ldw	r2,-31916(gp)
   101fc:	10000726 	beq	r2,zero,1021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10200:	d0a0d517 	ldw	r2,-31916(gp)
   10204:	e0ffff17 	ldw	r3,-4(fp)
   10208:	e1bffe17 	ldw	r6,-8(fp)
   1020c:	e17ffd17 	ldw	r5,-12(fp)
   10210:	1809883a 	mov	r4,r3
   10214:	103ee83a 	callr	r2
   10218:	00000206 	br	10224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   1021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10220:	0005883a 	mov	r2,zero
}
   10224:	e037883a 	mov	sp,fp
   10228:	dfc00117 	ldw	ra,4(sp)
   1022c:	df000017 	ldw	fp,0(sp)
   10230:	dec00204 	addi	sp,sp,8
   10234:	f800283a 	ret

Disassembly of section .text:

00010238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   1023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10244:	00bffd16 	blt	zero,r2,1023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10248:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   1024c:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10254:	d6adfd14 	ori	gp,gp,47092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   1025c:	108ecc14 	ori	r2,r2,15152

    movhi r3, %hi(__bss_end)
   10260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10264:	18cf1414 	ori	r3,r3,15440

    beq r2, r3, 1f
   10268:	10c00326 	beq	r2,r3,10278 <_start+0x40>

0:
    stw zero, (r2)
   1026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10274:	10fffd36 	bltu	r2,r3,1026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10278:	001131c0 	call	1131c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   1027c:	00113a00 	call	113a0 <alt_main>

00010280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10280:	003fff06 	br	10280 <alt_after_alt_main>

00010284 <calcula>:
#define op1_ent 5
#define op2_ent 6
#define op_2 7
#define resultado 8

int calcula(int operacao, int operando1, int operando2){
   10284:	defffc04 	addi	sp,sp,-16
   10288:	df000315 	stw	fp,12(sp)
   1028c:	df000304 	addi	fp,sp,12
   10290:	e13fff15 	stw	r4,-4(fp)
   10294:	e17ffe15 	stw	r5,-8(fp)
   10298:	e1bffd15 	stw	r6,-12(fp)
    if (operacao == somar) return operando1 + operando2;
   1029c:	e0bfff17 	ldw	r2,-4(fp)
   102a0:	1000041e 	bne	r2,zero,102b4 <calcula+0x30>
   102a4:	e0fffe17 	ldw	r3,-8(fp)
   102a8:	e0bffd17 	ldw	r2,-12(fp)
   102ac:	1885883a 	add	r2,r3,r2
   102b0:	00001806 	br	10314 <calcula+0x90>
    else if (operacao == subtrair) return operando1 - operando2;
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	10800058 	cmpnei	r2,r2,1
   102bc:	1000041e 	bne	r2,zero,102d0 <calcula+0x4c>
   102c0:	e0fffe17 	ldw	r3,-8(fp)
   102c4:	e0bffd17 	ldw	r2,-12(fp)
   102c8:	1885c83a 	sub	r2,r3,r2
   102cc:	00001106 	br	10314 <calcula+0x90>
    else if (operacao == incrementar) return ++operando1;
   102d0:	e0bfff17 	ldw	r2,-4(fp)
   102d4:	10800098 	cmpnei	r2,r2,2
   102d8:	1000051e 	bne	r2,zero,102f0 <calcula+0x6c>
   102dc:	e0bffe17 	ldw	r2,-8(fp)
   102e0:	10800044 	addi	r2,r2,1
   102e4:	e0bffe15 	stw	r2,-8(fp)
   102e8:	e0bffe17 	ldw	r2,-8(fp)
   102ec:	00000906 	br	10314 <calcula+0x90>
    else if (operacao == decrementar) return --operando1;
   102f0:	e0bfff17 	ldw	r2,-4(fp)
   102f4:	108000d8 	cmpnei	r2,r2,3
   102f8:	1000051e 	bne	r2,zero,10310 <calcula+0x8c>
   102fc:	e0bffe17 	ldw	r2,-8(fp)
   10300:	10bfffc4 	addi	r2,r2,-1
   10304:	e0bffe15 	stw	r2,-8(fp)
   10308:	e0bffe17 	ldw	r2,-8(fp)
   1030c:	00000106 	br	10314 <calcula+0x90>
    else return 0;
   10310:	0005883a 	mov	r2,zero
}
   10314:	e037883a 	mov	sp,fp
   10318:	df000017 	ldw	fp,0(sp)
   1031c:	dec00104 	addi	sp,sp,4
   10320:	f800283a 	ret

00010324 <limpa_lcd>:

void limpa_lcd(alt_up_character_lcd_dev * lcd){
   10324:	defffd04 	addi	sp,sp,-12
   10328:	dfc00215 	stw	ra,8(sp)
   1032c:	df000115 	stw	fp,4(sp)
   10330:	df000104 	addi	fp,sp,4
   10334:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_set_cursor_pos(lcd, 0, 0);
   10338:	000d883a 	mov	r6,zero
   1033c:	000b883a 	mov	r5,zero
   10340:	e13fff17 	ldw	r4,-4(fp)
   10344:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(lcd, "                ");
   10348:	01400074 	movhi	r5,1
   1034c:	294cf604 	addi	r5,r5,13272
   10350:	e13fff17 	ldw	r4,-4(fp)
   10354:	0011c580 	call	11c58 <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(lcd, 0, 1);
   10358:	01800044 	movi	r6,1
   1035c:	000b883a 	mov	r5,zero
   10360:	e13fff17 	ldw	r4,-4(fp)
   10364:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(lcd, "                ");
   10368:	01400074 	movhi	r5,1
   1036c:	294cf604 	addi	r5,r5,13272
   10370:	e13fff17 	ldw	r4,-4(fp)
   10374:	0011c580 	call	11c58 <alt_up_character_lcd_string>
}
   10378:	0001883a 	nop
   1037c:	e037883a 	mov	sp,fp
   10380:	dfc00117 	ldw	ra,4(sp)
   10384:	df000017 	ldw	fp,0(sp)
   10388:	dec00204 	addi	sp,sp,8
   1038c:	f800283a 	ret

00010390 <ler_operando>:

int ler_operando(){
   10390:	defffe04 	addi	sp,sp,-8
   10394:	df000115 	stw	fp,4(sp)
   10398:	df000104 	addi	fp,sp,4
	int entrada = IORD(ENTRADA_PIO_BASE,0);
   1039c:	008000b4 	movhi	r2,2
   103a0:	10840837 	ldwio	r2,4128(r2)
   103a4:	e0bfff15 	stw	r2,-4(fp)
	return (int) entrada & 65535;
   103a8:	e0bfff17 	ldw	r2,-4(fp)
   103ac:	10bfffcc 	andi	r2,r2,65535
}
   103b0:	e037883a 	mov	sp,fp
   103b4:	df000017 	ldw	fp,0(sp)
   103b8:	dec00104 	addi	sp,sp,4
   103bc:	f800283a 	ret

000103c0 <ler_operacao>:

int ler_operacao(){
   103c0:	defffd04 	addi	sp,sp,-12
   103c4:	df000215 	stw	fp,8(sp)
   103c8:	df000204 	addi	fp,sp,8
	int entrada = IORD(ENTRADA_PIO_BASE,0);
   103cc:	008000b4 	movhi	r2,2
   103d0:	10840837 	ldwio	r2,4128(r2)
   103d4:	e0bfff15 	stw	r2,-4(fp)
	int valor_lido = (int) entrada & 196608;
   103d8:	e0bfff17 	ldw	r2,-4(fp)
   103dc:	108000ec 	andhi	r2,r2,3
   103e0:	e0bffe15 	stw	r2,-8(fp)
	return valor_lido >> 16;
   103e4:	e0bffe17 	ldw	r2,-8(fp)
   103e8:	1005d43a 	srai	r2,r2,16
}
   103ec:	e037883a 	mov	sp,fp
   103f0:	df000017 	ldw	fp,0(sp)
   103f4:	dec00104 	addi	sp,sp,4
   103f8:	f800283a 	ret

000103fc <ler_enter>:

int ler_enter(){
   103fc:	defffd04 	addi	sp,sp,-12
   10400:	df000215 	stw	fp,8(sp)
   10404:	df000204 	addi	fp,sp,8
	int entrada = IORD(ENTRADA_PIO_BASE,0);
   10408:	008000b4 	movhi	r2,2
   1040c:	10840837 	ldwio	r2,4128(r2)
   10410:	e0bfff15 	stw	r2,-4(fp)
	int valor_lido = (int) entrada & 262144;
   10414:	e0bfff17 	ldw	r2,-4(fp)
   10418:	1080012c 	andhi	r2,r2,4
   1041c:	e0bffe15 	stw	r2,-8(fp)
	return 1 - (valor_lido >> 18);
   10420:	e0bffe17 	ldw	r2,-8(fp)
   10424:	1005d4ba 	srai	r2,r2,18
   10428:	00c00044 	movi	r3,1
   1042c:	1885c83a 	sub	r2,r3,r2
}
   10430:	e037883a 	mov	sp,fp
   10434:	df000017 	ldw	fp,0(sp)
   10438:	dec00104 	addi	sp,sp,4
   1043c:	f800283a 	ret

00010440 <traduz_operador>:

void traduz_operador(int operacao, char * operador_resultante){
   10440:	defffc04 	addi	sp,sp,-16
   10444:	dfc00315 	stw	ra,12(sp)
   10448:	df000215 	stw	fp,8(sp)
   1044c:	df000204 	addi	fp,sp,8
   10450:	e13fff15 	stw	r4,-4(fp)
   10454:	e17ffe15 	stw	r5,-8(fp)
	if (operacao == somar) sprintf(operador_resultante, "+");
   10458:	e0bfff17 	ldw	r2,-4(fp)
   1045c:	1000051e 	bne	r2,zero,10474 <traduz_operador+0x34>
   10460:	01400074 	movhi	r5,1
   10464:	294cfb04 	addi	r5,r5,13292
   10468:	e13ffe17 	ldw	r4,-8(fp)
   1046c:	0010a0c0 	call	10a0c <sprintf>
	else if (operacao == subtrair) sprintf(operador_resultante, "-");
	else if (operacao == incrementar) sprintf(operador_resultante, "++");
	else if (operacao == decrementar) sprintf(operador_resultante, "--");
	else sprintf(operador_resultante, "desconhecido");
}
   10470:	00001c06 	br	104e4 <traduz_operador+0xa4>
	else if (operacao == subtrair) sprintf(operador_resultante, "-");
   10474:	e0bfff17 	ldw	r2,-4(fp)
   10478:	10800058 	cmpnei	r2,r2,1
   1047c:	1000051e 	bne	r2,zero,10494 <traduz_operador+0x54>
   10480:	01400074 	movhi	r5,1
   10484:	294cfc04 	addi	r5,r5,13296
   10488:	e13ffe17 	ldw	r4,-8(fp)
   1048c:	0010a0c0 	call	10a0c <sprintf>
}
   10490:	00001406 	br	104e4 <traduz_operador+0xa4>
	else if (operacao == incrementar) sprintf(operador_resultante, "++");
   10494:	e0bfff17 	ldw	r2,-4(fp)
   10498:	10800098 	cmpnei	r2,r2,2
   1049c:	1000051e 	bne	r2,zero,104b4 <traduz_operador+0x74>
   104a0:	01400074 	movhi	r5,1
   104a4:	294cfd04 	addi	r5,r5,13300
   104a8:	e13ffe17 	ldw	r4,-8(fp)
   104ac:	0010a0c0 	call	10a0c <sprintf>
}
   104b0:	00000c06 	br	104e4 <traduz_operador+0xa4>
	else if (operacao == decrementar) sprintf(operador_resultante, "--");
   104b4:	e0bfff17 	ldw	r2,-4(fp)
   104b8:	108000d8 	cmpnei	r2,r2,3
   104bc:	1000051e 	bne	r2,zero,104d4 <traduz_operador+0x94>
   104c0:	01400074 	movhi	r5,1
   104c4:	294cfe04 	addi	r5,r5,13304
   104c8:	e13ffe17 	ldw	r4,-8(fp)
   104cc:	0010a0c0 	call	10a0c <sprintf>
}
   104d0:	00000406 	br	104e4 <traduz_operador+0xa4>
	else sprintf(operador_resultante, "desconhecido");
   104d4:	01400074 	movhi	r5,1
   104d8:	294cff04 	addi	r5,r5,13308
   104dc:	e13ffe17 	ldw	r4,-8(fp)
   104e0:	0010a0c0 	call	10a0c <sprintf>
}
   104e4:	0001883a 	nop
   104e8:	e037883a 	mov	sp,fp
   104ec:	dfc00117 	ldw	ra,4(sp)
   104f0:	df000017 	ldw	fp,0(sp)
   104f4:	dec00204 	addi	sp,sp,8
   104f8:	f800283a 	ret

000104fc <traduz_operador_extenso>:

void traduz_operador_extenso(int operacao, char * operador_resultante){
   104fc:	defffc04 	addi	sp,sp,-16
   10500:	dfc00315 	stw	ra,12(sp)
   10504:	df000215 	stw	fp,8(sp)
   10508:	df000204 	addi	fp,sp,8
   1050c:	e13fff15 	stw	r4,-4(fp)
   10510:	e17ffe15 	stw	r5,-8(fp)
	if (operacao == somar) sprintf(operador_resultante, "Somar");
   10514:	e0bfff17 	ldw	r2,-4(fp)
   10518:	1000051e 	bne	r2,zero,10530 <traduz_operador_extenso+0x34>
   1051c:	01400074 	movhi	r5,1
   10520:	294d0304 	addi	r5,r5,13324
   10524:	e13ffe17 	ldw	r4,-8(fp)
   10528:	0010a0c0 	call	10a0c <sprintf>
	else if (operacao == subtrair) sprintf(operador_resultante, "Subtrair");
	else if (operacao == incrementar) sprintf(operador_resultante, "Incrementar");
	else if (operacao == decrementar) sprintf(operador_resultante, "Decrementar");
	else sprintf(operador_resultante, "Desconhecido");
}
   1052c:	00001c06 	br	105a0 <traduz_operador_extenso+0xa4>
	else if (operacao == subtrair) sprintf(operador_resultante, "Subtrair");
   10530:	e0bfff17 	ldw	r2,-4(fp)
   10534:	10800058 	cmpnei	r2,r2,1
   10538:	1000051e 	bne	r2,zero,10550 <traduz_operador_extenso+0x54>
   1053c:	01400074 	movhi	r5,1
   10540:	294d0504 	addi	r5,r5,13332
   10544:	e13ffe17 	ldw	r4,-8(fp)
   10548:	0010a0c0 	call	10a0c <sprintf>
}
   1054c:	00001406 	br	105a0 <traduz_operador_extenso+0xa4>
	else if (operacao == incrementar) sprintf(operador_resultante, "Incrementar");
   10550:	e0bfff17 	ldw	r2,-4(fp)
   10554:	10800098 	cmpnei	r2,r2,2
   10558:	1000051e 	bne	r2,zero,10570 <traduz_operador_extenso+0x74>
   1055c:	01400074 	movhi	r5,1
   10560:	294d0804 	addi	r5,r5,13344
   10564:	e13ffe17 	ldw	r4,-8(fp)
   10568:	0010a0c0 	call	10a0c <sprintf>
}
   1056c:	00000c06 	br	105a0 <traduz_operador_extenso+0xa4>
	else if (operacao == decrementar) sprintf(operador_resultante, "Decrementar");
   10570:	e0bfff17 	ldw	r2,-4(fp)
   10574:	108000d8 	cmpnei	r2,r2,3
   10578:	1000051e 	bne	r2,zero,10590 <traduz_operador_extenso+0x94>
   1057c:	01400074 	movhi	r5,1
   10580:	294d0b04 	addi	r5,r5,13356
   10584:	e13ffe17 	ldw	r4,-8(fp)
   10588:	0010a0c0 	call	10a0c <sprintf>
}
   1058c:	00000406 	br	105a0 <traduz_operador_extenso+0xa4>
	else sprintf(operador_resultante, "Desconhecido");
   10590:	01400074 	movhi	r5,1
   10594:	294d0e04 	addi	r5,r5,13368
   10598:	e13ffe17 	ldw	r4,-8(fp)
   1059c:	0010a0c0 	call	10a0c <sprintf>
}
   105a0:	0001883a 	nop
   105a4:	e037883a 	mov	sp,fp
   105a8:	dfc00117 	ldw	ra,4(sp)
   105ac:	df000017 	ldw	fp,0(sp)
   105b0:	dec00204 	addi	sp,sp,8
   105b4:	f800283a 	ret

000105b8 <main>:

int main(void) {
   105b8:	deffeb04 	addi	sp,sp,-84
   105bc:	dfc01415 	stw	ra,80(sp)
   105c0:	df001315 	stw	fp,76(sp)
   105c4:	df001304 	addi	fp,sp,76
	alt_up_character_lcd_dev * dispositivo_LCD;

	// open the Character LCD port
	dispositivo_LCD = alt_up_character_lcd_open_dev ("/dev/lcd_16x2");
   105c8:	01000074 	movhi	r4,1
   105cc:	210d1204 	addi	r4,r4,13384
   105d0:	0011b9c0 	call	11b9c <alt_up_character_lcd_open_dev>
   105d4:	e0bffb15 	stw	r2,-20(fp)
	if (dispositivo_LCD == NULL) alt_printf ("Error: could not open character LCD device\n");
   105d8:	e0bffb17 	ldw	r2,-20(fp)
   105dc:	1000041e 	bne	r2,zero,105f0 <main+0x38>
   105e0:	01000074 	movhi	r4,1
   105e4:	210d1604 	addi	r4,r4,13400
   105e8:	001140c0 	call	1140c <alt_printf>
   105ec:	00000306 	br	105fc <main+0x44>
	else alt_printf ("Opened character LCD device\n");
   105f0:	01000074 	movhi	r4,1
   105f4:	210d2104 	addi	r4,r4,13444
   105f8:	001140c0 	call	1140c <alt_printf>

	/* Initialize the character display */
	alt_up_character_lcd_init (dispositivo_LCD);
   105fc:	e13ffb17 	ldw	r4,-20(fp)
   10600:	0011b640 	call	11b64 <alt_up_character_lcd_init>

	alt_up_character_lcd_cursor_off(dispositivo_LCD);
   10604:	e13ffb17 	ldw	r4,-20(fp)
   10608:	0011f3c0 	call	11f3c <alt_up_character_lcd_cursor_off>

	int estado = 0, operacao = 0, operando1 = 0, operando2 = 0, enter = 0, resultado_final = 0;
   1060c:	e03fff15 	stw	zero,-4(fp)
   10610:	e03ffe15 	stw	zero,-8(fp)
   10614:	e03ffd15 	stw	zero,-12(fp)
   10618:	e03ffc15 	stw	zero,-16(fp)
   1061c:	e03ffa15 	stw	zero,-24(fp)
   10620:	e03ff915 	stw	zero,-28(fp)
	char primeira_linha[16], segunda_linha[16], operador[2], conta[8];

	while (1){
		limpa_lcd(dispositivo_LCD);
   10624:	e13ffb17 	ldw	r4,-20(fp)
   10628:	00103240 	call	10324 <limpa_lcd>
   1062c:	e0bfff17 	ldw	r2,-4(fp)
   10630:	10bfff04 	addi	r2,r2,-4
   10634:	10c00168 	cmpgeui	r3,r2,5
   10638:	1800d21e 	bne	r3,zero,10984 <main+0x3cc>
   1063c:	100690ba 	slli	r3,r2,2
   10640:	00800074 	movhi	r2,1
   10644:	1885883a 	add	r2,r3,r2
   10648:	10819417 	ldw	r2,1616(r2)
   1064c:	1000683a 	jmp	r2
   10650:	00010664 	muli	zero,zero,1049
   10654:	00010704 	movi	zero,1052
   10658:	000107a8 	cmpgeui	zero,zero,1054
   1065c:	0001084c 	andi	zero,zero,1057
   10660:	000108e4 	muli	zero,zero,1059
		switch (estado) {
			case idle:
			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 0);
   10664:	000d883a 	mov	r6,zero
   10668:	000b883a 	mov	r5,zero
   1066c:	e13ffb17 	ldw	r4,-20(fp)
   10670:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   alt_up_character_lcd_string(dispositivo_LCD, "Operador:");
   10674:	01400074 	movhi	r5,1
   10678:	294d2904 	addi	r5,r5,13476
   1067c:	e13ffb17 	ldw	r4,-20(fp)
   10680:	0011c580 	call	11c58 <alt_up_character_lcd_string>
			   operacao = ler_operacao();
   10684:	00103c00 	call	103c0 <ler_operacao>
   10688:	e0bffe15 	stw	r2,-8(fp)

			   traduz_operador(operacao, operador);
   1068c:	e0bff084 	addi	r2,fp,-62
   10690:	100b883a 	mov	r5,r2
   10694:	e13ffe17 	ldw	r4,-8(fp)
   10698:	00104400 	call	10440 <traduz_operador>

			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 1);
   1069c:	01800044 	movi	r6,1
   106a0:	000b883a 	mov	r5,zero
   106a4:	e13ffb17 	ldw	r4,-20(fp)
   106a8:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   alt_up_character_lcd_string(dispositivo_LCD, operador);
   106ac:	e0bff084 	addi	r2,fp,-62
   106b0:	100b883a 	mov	r5,r2
   106b4:	e13ffb17 	ldw	r4,-20(fp)
   106b8:	0011c580 	call	11c58 <alt_up_character_lcd_string>

			   enter = ler_enter();
   106bc:	00103fc0 	call	103fc <ler_enter>
   106c0:	e0bffa15 	stw	r2,-24(fp)

			   if (enter) {
   106c4:	e0bffa17 	ldw	r2,-24(fp)
   106c8:	1000b126 	beq	r2,zero,10990 <main+0x3d8>
				  if ((operacao == 0) | (operacao == 1)) estado = op2_ent;
   106cc:	e0bffe17 	ldw	r2,-8(fp)
   106d0:	1005003a 	cmpeq	r2,r2,zero
   106d4:	1007883a 	mov	r3,r2
   106d8:	e0bffe17 	ldw	r2,-8(fp)
   106dc:	10800060 	cmpeqi	r2,r2,1
   106e0:	1884b03a 	or	r2,r3,r2
   106e4:	10803fcc 	andi	r2,r2,255
   106e8:	10000326 	beq	r2,zero,106f8 <main+0x140>
   106ec:	00800184 	movi	r2,6
   106f0:	e0bfff15 	stw	r2,-4(fp)
				  else estado = op1_ent;
			   }
			   break;
   106f4:	0000a606 	br	10990 <main+0x3d8>
				  else estado = op1_ent;
   106f8:	00800144 	movi	r2,5
   106fc:	e0bfff15 	stw	r2,-4(fp)
			   break;
   10700:	0000a306 	br	10990 <main+0x3d8>

			case op1_ent:
			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 0);
   10704:	000d883a 	mov	r6,zero
   10708:	000b883a 	mov	r5,zero
   1070c:	e13ffb17 	ldw	r4,-20(fp)
   10710:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   traduz_operador_extenso(operacao, primeira_linha);
   10714:	e0bff504 	addi	r2,fp,-44
   10718:	100b883a 	mov	r5,r2
   1071c:	e13ffe17 	ldw	r4,-8(fp)
   10720:	00104fc0 	call	104fc <traduz_operador_extenso>
			   alt_up_character_lcd_string(dispositivo_LCD, primeira_linha);
   10724:	e0bff504 	addi	r2,fp,-44
   10728:	100b883a 	mov	r5,r2
   1072c:	e13ffb17 	ldw	r4,-20(fp)
   10730:	0011c580 	call	11c58 <alt_up_character_lcd_string>

			   operando1 = ler_operando();
   10734:	00103900 	call	10390 <ler_operando>
   10738:	e0bffd15 	stw	r2,-12(fp)
			   IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE,operando1);
   1073c:	e0fffd17 	ldw	r3,-12(fp)
   10740:	008000b4 	movhi	r2,2
   10744:	10c41035 	stwio	r3,4160(r2)

			   sprintf(conta, "%s%d", operador, operando1);
   10748:	e0fff084 	addi	r3,fp,-62
   1074c:	e0bfee84 	addi	r2,fp,-70
   10750:	e1fffd17 	ldw	r7,-12(fp)
   10754:	180d883a 	mov	r6,r3
   10758:	01400074 	movhi	r5,1
   1075c:	294d2c04 	addi	r5,r5,13488
   10760:	1009883a 	mov	r4,r2
   10764:	0010a0c0 	call	10a0c <sprintf>
			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 1);
   10768:	01800044 	movi	r6,1
   1076c:	000b883a 	mov	r5,zero
   10770:	e13ffb17 	ldw	r4,-20(fp)
   10774:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   alt_up_character_lcd_string(dispositivo_LCD, conta);
   10778:	e0bfee84 	addi	r2,fp,-70
   1077c:	100b883a 	mov	r5,r2
   10780:	e13ffb17 	ldw	r4,-20(fp)
   10784:	0011c580 	call	11c58 <alt_up_character_lcd_string>

			   enter = ler_enter();
   10788:	00103fc0 	call	103fc <ler_enter>
   1078c:	e0bffa15 	stw	r2,-24(fp)

			   if (enter) estado = resultado;
   10790:	e0bffa17 	ldw	r2,-24(fp)
   10794:	10000226 	beq	r2,zero,107a0 <main+0x1e8>
   10798:	00800204 	movi	r2,8
   1079c:	e0bfff15 	stw	r2,-4(fp)
			   enter = 0;
   107a0:	e03ffa15 	stw	zero,-24(fp)
			   break;
   107a4:	00007d06 	br	1099c <main+0x3e4>

			case op2_ent:
			   traduz_operador_extenso(operacao, primeira_linha);
   107a8:	e0bff504 	addi	r2,fp,-44
   107ac:	100b883a 	mov	r5,r2
   107b0:	e13ffe17 	ldw	r4,-8(fp)
   107b4:	00104fc0 	call	104fc <traduz_operador_extenso>
			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 0);
   107b8:	000d883a 	mov	r6,zero
   107bc:	000b883a 	mov	r5,zero
   107c0:	e13ffb17 	ldw	r4,-20(fp)
   107c4:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   alt_up_character_lcd_string(dispositivo_LCD, primeira_linha);
   107c8:	e0bff504 	addi	r2,fp,-44
   107cc:	100b883a 	mov	r5,r2
   107d0:	e13ffb17 	ldw	r4,-20(fp)
   107d4:	0011c580 	call	11c58 <alt_up_character_lcd_string>

			   operando1 = ler_operando();
   107d8:	00103900 	call	10390 <ler_operando>
   107dc:	e0bffd15 	stw	r2,-12(fp)
			   IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE,operando1);
   107e0:	e0fffd17 	ldw	r3,-12(fp)
   107e4:	008000b4 	movhi	r2,2
   107e8:	10c41035 	stwio	r3,4160(r2)

			   sprintf(conta, "%d %s", operando1, operador);
   107ec:	e0fff084 	addi	r3,fp,-62
   107f0:	e0bfee84 	addi	r2,fp,-70
   107f4:	180f883a 	mov	r7,r3
   107f8:	e1bffd17 	ldw	r6,-12(fp)
   107fc:	01400074 	movhi	r5,1
   10800:	294d2e04 	addi	r5,r5,13496
   10804:	1009883a 	mov	r4,r2
   10808:	0010a0c0 	call	10a0c <sprintf>
			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 1);
   1080c:	01800044 	movi	r6,1
   10810:	000b883a 	mov	r5,zero
   10814:	e13ffb17 	ldw	r4,-20(fp)
   10818:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   alt_up_character_lcd_string(dispositivo_LCD, conta);
   1081c:	e0bfee84 	addi	r2,fp,-70
   10820:	100b883a 	mov	r5,r2
   10824:	e13ffb17 	ldw	r4,-20(fp)
   10828:	0011c580 	call	11c58 <alt_up_character_lcd_string>

			   enter = ler_enter();
   1082c:	00103fc0 	call	103fc <ler_enter>
   10830:	e0bffa15 	stw	r2,-24(fp)

			   if (enter) estado = op_2;
   10834:	e0bffa17 	ldw	r2,-24(fp)
   10838:	10000226 	beq	r2,zero,10844 <main+0x28c>
   1083c:	008001c4 	movi	r2,7
   10840:	e0bfff15 	stw	r2,-4(fp)
			   enter = 0;
   10844:	e03ffa15 	stw	zero,-24(fp)
			   break;
   10848:	00005406 	br	1099c <main+0x3e4>

			case op_2:
			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 0);
   1084c:	000d883a 	mov	r6,zero
   10850:	000b883a 	mov	r5,zero
   10854:	e13ffb17 	ldw	r4,-20(fp)
   10858:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   alt_up_character_lcd_string(dispositivo_LCD, primeira_linha);
   1085c:	e0bff504 	addi	r2,fp,-44
   10860:	100b883a 	mov	r5,r2
   10864:	e13ffb17 	ldw	r4,-20(fp)
   10868:	0011c580 	call	11c58 <alt_up_character_lcd_string>

			   operando2 = ler_operando();
   1086c:	00103900 	call	10390 <ler_operando>
   10870:	e0bffc15 	stw	r2,-16(fp)
			   IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE,operando2);
   10874:	e0fffc17 	ldw	r3,-16(fp)
   10878:	008000b4 	movhi	r2,2
   1087c:	10c41035 	stwio	r3,4160(r2)

			   sprintf(conta, "%d %s %d", operando1, operador, operando2);
   10880:	e13ff084 	addi	r4,fp,-62
   10884:	e0ffee84 	addi	r3,fp,-70
   10888:	e0bffc17 	ldw	r2,-16(fp)
   1088c:	d8800015 	stw	r2,0(sp)
   10890:	200f883a 	mov	r7,r4
   10894:	e1bffd17 	ldw	r6,-12(fp)
   10898:	01400074 	movhi	r5,1
   1089c:	294d3004 	addi	r5,r5,13504
   108a0:	1809883a 	mov	r4,r3
   108a4:	0010a0c0 	call	10a0c <sprintf>
			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 1);
   108a8:	01800044 	movi	r6,1
   108ac:	000b883a 	mov	r5,zero
   108b0:	e13ffb17 	ldw	r4,-20(fp)
   108b4:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   alt_up_character_lcd_string(dispositivo_LCD, conta);
   108b8:	e0bfee84 	addi	r2,fp,-70
   108bc:	100b883a 	mov	r5,r2
   108c0:	e13ffb17 	ldw	r4,-20(fp)
   108c4:	0011c580 	call	11c58 <alt_up_character_lcd_string>
			   enter = ler_enter();
   108c8:	00103fc0 	call	103fc <ler_enter>
   108cc:	e0bffa15 	stw	r2,-24(fp)

			   if (enter) estado = resultado;
   108d0:	e0bffa17 	ldw	r2,-24(fp)
   108d4:	10003026 	beq	r2,zero,10998 <main+0x3e0>
   108d8:	00800204 	movi	r2,8
   108dc:	e0bfff15 	stw	r2,-4(fp)
			   break;
   108e0:	00002d06 	br	10998 <main+0x3e0>

			case resultado:
			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 0);
   108e4:	000d883a 	mov	r6,zero
   108e8:	000b883a 	mov	r5,zero
   108ec:	e13ffb17 	ldw	r4,-20(fp)
   108f0:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   alt_up_character_lcd_string(dispositivo_LCD, primeira_linha);
   108f4:	e0bff504 	addi	r2,fp,-44
   108f8:	100b883a 	mov	r5,r2
   108fc:	e13ffb17 	ldw	r4,-20(fp)
   10900:	0011c580 	call	11c58 <alt_up_character_lcd_string>

			   resultado_final = calcula(operacao, operando1, operando2);
   10904:	e1bffc17 	ldw	r6,-16(fp)
   10908:	e17ffd17 	ldw	r5,-12(fp)
   1090c:	e13ffe17 	ldw	r4,-8(fp)
   10910:	00102840 	call	10284 <calcula>
   10914:	e0bff915 	stw	r2,-28(fp)
			   IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE,resultado_final);
   10918:	e0fff917 	ldw	r3,-28(fp)
   1091c:	008000b4 	movhi	r2,2
   10920:	10c41035 	stwio	r3,4160(r2)

			   alt_up_character_lcd_set_cursor_pos(dispositivo_LCD, 0, 1);
   10924:	01800044 	movi	r6,1
   10928:	000b883a 	mov	r5,zero
   1092c:	e13ffb17 	ldw	r4,-20(fp)
   10930:	0011d240 	call	11d24 <alt_up_character_lcd_set_cursor_pos>
			   sprintf(segunda_linha, "%s = %d", conta, resultado_final);
   10934:	e0ffee84 	addi	r3,fp,-70
   10938:	e0bff104 	addi	r2,fp,-60
   1093c:	e1fff917 	ldw	r7,-28(fp)
   10940:	180d883a 	mov	r6,r3
   10944:	01400074 	movhi	r5,1
   10948:	294d3304 	addi	r5,r5,13516
   1094c:	1009883a 	mov	r4,r2
   10950:	0010a0c0 	call	10a0c <sprintf>
			   alt_up_character_lcd_string(dispositivo_LCD, segunda_linha);
   10954:	e0bff104 	addi	r2,fp,-60
   10958:	100b883a 	mov	r5,r2
   1095c:	e13ffb17 	ldw	r4,-20(fp)
   10960:	0011c580 	call	11c58 <alt_up_character_lcd_string>

			   enter = ler_enter();
   10964:	00103fc0 	call	103fc <ler_enter>
   10968:	e0bffa15 	stw	r2,-24(fp)

			   if (enter) estado = idle;
   1096c:	e0bffa17 	ldw	r2,-24(fp)
   10970:	10000226 	beq	r2,zero,1097c <main+0x3c4>
   10974:	00800104 	movi	r2,4
   10978:	e0bfff15 	stw	r2,-4(fp)
			   enter = 0;
   1097c:	e03ffa15 	stw	zero,-24(fp)
			   break;
   10980:	00000606 	br	1099c <main+0x3e4>
			default:
			   estado = idle;
   10984:	00800104 	movi	r2,4
   10988:	e0bfff15 	stw	r2,-4(fp)
   1098c:	00000306 	br	1099c <main+0x3e4>
			   break;
   10990:	0001883a 	nop
   10994:	00000106 	br	1099c <main+0x3e4>
			   break;
   10998:	0001883a 	nop
		}
		usleep(200000);
   1099c:	010000f4 	movhi	r4,3
   109a0:	21035004 	addi	r4,r4,3392
   109a4:	00116680 	call	11668 <usleep>
		limpa_lcd(dispositivo_LCD);
   109a8:	003f1e06 	br	10624 <main+0x6c>

000109ac <_sprintf_r>:
   109ac:	defff704 	addi	sp,sp,-36
   109b0:	dfc00715 	stw	ra,28(sp)
   109b4:	d9c00815 	stw	r7,32(sp)
   109b8:	00a00034 	movhi	r2,32768
   109bc:	10bfffc4 	addi	r2,r2,-1
   109c0:	d8800515 	stw	r2,20(sp)
   109c4:	d8800315 	stw	r2,12(sp)
   109c8:	00bffff4 	movhi	r2,65535
   109cc:	10808204 	addi	r2,r2,520
   109d0:	d8800015 	stw	r2,0(sp)
   109d4:	00800074 	movhi	r2,1
   109d8:	d9400415 	stw	r5,16(sp)
   109dc:	d9400215 	stw	r5,8(sp)
   109e0:	1083fb04 	addi	r2,r2,4076
   109e4:	d9c00804 	addi	r7,sp,32
   109e8:	d80b883a 	mov	r5,sp
   109ec:	d8800115 	stw	r2,4(sp)
   109f0:	d8000615 	stw	zero,24(sp)
   109f4:	0010ae80 	call	10ae8 <___svfprintf_internal_r>
   109f8:	d8c00417 	ldw	r3,16(sp)
   109fc:	18000005 	stb	zero,0(r3)
   10a00:	dfc00717 	ldw	ra,28(sp)
   10a04:	dec00904 	addi	sp,sp,36
   10a08:	f800283a 	ret

00010a0c <sprintf>:
   10a0c:	defff604 	addi	sp,sp,-40
   10a10:	dfc00715 	stw	ra,28(sp)
   10a14:	d9800815 	stw	r6,32(sp)
   10a18:	d9c00915 	stw	r7,36(sp)
   10a1c:	00a00034 	movhi	r2,32768
   10a20:	10bfffc4 	addi	r2,r2,-1
   10a24:	d8800515 	stw	r2,20(sp)
   10a28:	d8800315 	stw	r2,12(sp)
   10a2c:	00bffff4 	movhi	r2,65535
   10a30:	10808204 	addi	r2,r2,520
   10a34:	d8800015 	stw	r2,0(sp)
   10a38:	00800074 	movhi	r2,1
   10a3c:	1083fb04 	addi	r2,r2,4076
   10a40:	d8800115 	stw	r2,4(sp)
   10a44:	00800074 	movhi	r2,1
   10a48:	d9000415 	stw	r4,16(sp)
   10a4c:	d9000215 	stw	r4,8(sp)
   10a50:	110dfe17 	ldw	r4,14328(r2)
   10a54:	280d883a 	mov	r6,r5
   10a58:	d9c00804 	addi	r7,sp,32
   10a5c:	d80b883a 	mov	r5,sp
   10a60:	d8000615 	stw	zero,24(sp)
   10a64:	0010ae80 	call	10ae8 <___svfprintf_internal_r>
   10a68:	d8c00417 	ldw	r3,16(sp)
   10a6c:	18000005 	stb	zero,0(r3)
   10a70:	dfc00717 	ldw	ra,28(sp)
   10a74:	dec00a04 	addi	sp,sp,40
   10a78:	f800283a 	ret

00010a7c <print_repeat>:
   10a7c:	defffb04 	addi	sp,sp,-20
   10a80:	dc800315 	stw	r18,12(sp)
   10a84:	dc400215 	stw	r17,8(sp)
   10a88:	dc000115 	stw	r16,4(sp)
   10a8c:	dfc00415 	stw	ra,16(sp)
   10a90:	2025883a 	mov	r18,r4
   10a94:	2823883a 	mov	r17,r5
   10a98:	d9800005 	stb	r6,0(sp)
   10a9c:	3821883a 	mov	r16,r7
   10aa0:	04000716 	blt	zero,r16,10ac0 <print_repeat+0x44>
   10aa4:	0005883a 	mov	r2,zero
   10aa8:	dfc00417 	ldw	ra,16(sp)
   10aac:	dc800317 	ldw	r18,12(sp)
   10ab0:	dc400217 	ldw	r17,8(sp)
   10ab4:	dc000117 	ldw	r16,4(sp)
   10ab8:	dec00504 	addi	sp,sp,20
   10abc:	f800283a 	ret
   10ac0:	88800117 	ldw	r2,4(r17)
   10ac4:	01c00044 	movi	r7,1
   10ac8:	d80d883a 	mov	r6,sp
   10acc:	880b883a 	mov	r5,r17
   10ad0:	9009883a 	mov	r4,r18
   10ad4:	103ee83a 	callr	r2
   10ad8:	843fffc4 	addi	r16,r16,-1
   10adc:	103ff026 	beq	r2,zero,10aa0 <print_repeat+0x24>
   10ae0:	00bfffc4 	movi	r2,-1
   10ae4:	003ff006 	br	10aa8 <print_repeat+0x2c>

00010ae8 <___svfprintf_internal_r>:
   10ae8:	deffe604 	addi	sp,sp,-104
   10aec:	df001815 	stw	fp,96(sp)
   10af0:	ddc01715 	stw	r23,92(sp)
   10af4:	dd801615 	stw	r22,88(sp)
   10af8:	dd001415 	stw	r20,80(sp)
   10afc:	dcc01315 	stw	r19,76(sp)
   10b00:	dc801215 	stw	r18,72(sp)
   10b04:	dc401115 	stw	r17,68(sp)
   10b08:	dc001015 	stw	r16,64(sp)
   10b0c:	dfc01915 	stw	ra,100(sp)
   10b10:	dd401515 	stw	r21,84(sp)
   10b14:	2021883a 	mov	r16,r4
   10b18:	282f883a 	mov	r23,r5
   10b1c:	d9800515 	stw	r6,20(sp)
   10b20:	3839883a 	mov	fp,r7
   10b24:	002d883a 	mov	r22,zero
   10b28:	d8000215 	stw	zero,8(sp)
   10b2c:	0027883a 	mov	r19,zero
   10b30:	0029883a 	mov	r20,zero
   10b34:	0025883a 	mov	r18,zero
   10b38:	0023883a 	mov	r17,zero
   10b3c:	d8000115 	stw	zero,4(sp)
   10b40:	d8000015 	stw	zero,0(sp)
   10b44:	0005883a 	mov	r2,zero
   10b48:	00000206 	br	10b54 <___svfprintf_internal_r+0x6c>
   10b4c:	118000e0 	cmpeqi	r6,r2,3
   10b50:	30003d1e 	bne	r6,zero,10c48 <___svfprintf_internal_r+0x160>
   10b54:	d8c00517 	ldw	r3,20(sp)
   10b58:	19000003 	ldbu	r4,0(r3)
   10b5c:	18c00044 	addi	r3,r3,1
   10b60:	d8c00515 	stw	r3,20(sp)
   10b64:	21403fcc 	andi	r5,r4,255
   10b68:	2940201c 	xori	r5,r5,128
   10b6c:	297fe004 	addi	r5,r5,-128
   10b70:	28001426 	beq	r5,zero,10bc4 <___svfprintf_internal_r+0xdc>
   10b74:	118000a0 	cmpeqi	r6,r2,2
   10b78:	3000231e 	bne	r6,zero,10c08 <___svfprintf_internal_r+0x120>
   10b7c:	118000c8 	cmpgei	r6,r2,3
   10b80:	303ff21e 	bne	r6,zero,10b4c <___svfprintf_internal_r+0x64>
   10b84:	10000426 	beq	r2,zero,10b98 <___svfprintf_internal_r+0xb0>
   10b88:	10800060 	cmpeqi	r2,r2,1
   10b8c:	10001a1e 	bne	r2,zero,10bf8 <___svfprintf_internal_r+0x110>
   10b90:	00800084 	movi	r2,2
   10b94:	003fef06 	br	10b54 <___svfprintf_internal_r+0x6c>
   10b98:	29400960 	cmpeqi	r5,r5,37
   10b9c:	2800f61e 	bne	r5,zero,10f78 <___svfprintf_internal_r+0x490>
   10ba0:	b8800117 	ldw	r2,4(r23)
   10ba4:	d9000805 	stb	r4,32(sp)
   10ba8:	01c00044 	movi	r7,1
   10bac:	d9800804 	addi	r6,sp,32
   10bb0:	b80b883a 	mov	r5,r23
   10bb4:	8009883a 	mov	r4,r16
   10bb8:	103ee83a 	callr	r2
   10bbc:	10001b26 	beq	r2,zero,10c2c <___svfprintf_internal_r+0x144>
   10bc0:	05bfffc4 	movi	r22,-1
   10bc4:	b005883a 	mov	r2,r22
   10bc8:	dfc01917 	ldw	ra,100(sp)
   10bcc:	df001817 	ldw	fp,96(sp)
   10bd0:	ddc01717 	ldw	r23,92(sp)
   10bd4:	dd801617 	ldw	r22,88(sp)
   10bd8:	dd401517 	ldw	r21,84(sp)
   10bdc:	dd001417 	ldw	r20,80(sp)
   10be0:	dcc01317 	ldw	r19,76(sp)
   10be4:	dc801217 	ldw	r18,72(sp)
   10be8:	dc401117 	ldw	r17,68(sp)
   10bec:	dc001017 	ldw	r16,64(sp)
   10bf0:	dec01a04 	addi	sp,sp,104
   10bf4:	f800283a 	ret
   10bf8:	28800c20 	cmpeqi	r2,r5,48
   10bfc:	1000e71e 	bne	r2,zero,10f9c <___svfprintf_internal_r+0x4b4>
   10c00:	28800958 	cmpnei	r2,r5,37
   10c04:	103fe626 	beq	r2,zero,10ba0 <___svfprintf_internal_r+0xb8>
   10c08:	20bff404 	addi	r2,r4,-48
   10c0c:	10803fcc 	andi	r2,r2,255
   10c10:	118002a8 	cmpgeui	r6,r2,10
   10c14:	3000091e 	bne	r6,zero,10c3c <___svfprintf_internal_r+0x154>
   10c18:	893fffe0 	cmpeqi	r4,r17,-1
   10c1c:	2000051e 	bne	r4,zero,10c34 <___svfprintf_internal_r+0x14c>
   10c20:	8c4002a4 	muli	r17,r17,10
   10c24:	1463883a 	add	r17,r2,r17
   10c28:	003fd906 	br	10b90 <___svfprintf_internal_r+0xa8>
   10c2c:	b5800044 	addi	r22,r22,1
   10c30:	003fc806 	br	10b54 <___svfprintf_internal_r+0x6c>
   10c34:	0023883a 	mov	r17,zero
   10c38:	003ffa06 	br	10c24 <___svfprintf_internal_r+0x13c>
   10c3c:	28800ba0 	cmpeqi	r2,r5,46
   10c40:	1000db1e 	bne	r2,zero,10fb0 <___svfprintf_internal_r+0x4c8>
   10c44:	00800084 	movi	r2,2
   10c48:	213ff404 	addi	r4,r4,-48
   10c4c:	21003fcc 	andi	r4,r4,255
   10c50:	218002a8 	cmpgeui	r6,r4,10
   10c54:	3000071e 	bne	r6,zero,10c74 <___svfprintf_internal_r+0x18c>
   10c58:	917fffe0 	cmpeqi	r5,r18,-1
   10c5c:	2800031e 	bne	r5,zero,10c6c <___svfprintf_internal_r+0x184>
   10c60:	948002a4 	muli	r18,r18,10
   10c64:	24a5883a 	add	r18,r4,r18
   10c68:	003fba06 	br	10b54 <___svfprintf_internal_r+0x6c>
   10c6c:	0025883a 	mov	r18,zero
   10c70:	003ffc06 	br	10c64 <___svfprintf_internal_r+0x17c>
   10c74:	28801b20 	cmpeqi	r2,r5,108
   10c78:	1000cb1e 	bne	r2,zero,10fa8 <___svfprintf_internal_r+0x4c0>
   10c7c:	90bfffe0 	cmpeqi	r2,r18,-1
   10c80:	10000f1e 	bne	r2,zero,10cc0 <___svfprintf_internal_r+0x1d8>
   10c84:	d8000015 	stw	zero,0(sp)
   10c88:	28801be0 	cmpeqi	r2,r5,111
   10c8c:	1000ca1e 	bne	r2,zero,10fb8 <___svfprintf_internal_r+0x4d0>
   10c90:	28801c08 	cmpgei	r2,r5,112
   10c94:	1000171e 	bne	r2,zero,10cf4 <___svfprintf_internal_r+0x20c>
   10c98:	288018e0 	cmpeqi	r2,r5,99
   10c9c:	10009f1e 	bne	r2,zero,10f1c <___svfprintf_internal_r+0x434>
   10ca0:	28801908 	cmpgei	r2,r5,100
   10ca4:	1000081e 	bne	r2,zero,10cc8 <___svfprintf_internal_r+0x1e0>
   10ca8:	29401620 	cmpeqi	r5,r5,88
   10cac:	283fa526 	beq	r5,zero,10b44 <___svfprintf_internal_r+0x5c>
   10cb0:	00800044 	movi	r2,1
   10cb4:	d8800215 	stw	r2,8(sp)
   10cb8:	05000404 	movi	r20,16
   10cbc:	0000bf06 	br	10fbc <___svfprintf_internal_r+0x4d4>
   10cc0:	04800044 	movi	r18,1
   10cc4:	003ff006 	br	10c88 <___svfprintf_internal_r+0x1a0>
   10cc8:	28801920 	cmpeqi	r2,r5,100
   10ccc:	1000021e 	bne	r2,zero,10cd8 <___svfprintf_internal_r+0x1f0>
   10cd0:	29401a60 	cmpeqi	r5,r5,105
   10cd4:	283f9b26 	beq	r5,zero,10b44 <___svfprintf_internal_r+0x5c>
   10cd8:	e0800104 	addi	r2,fp,4
   10cdc:	d8800415 	stw	r2,16(sp)
   10ce0:	9800b626 	beq	r19,zero,10fbc <___svfprintf_internal_r+0x4d4>
   10ce4:	e5400017 	ldw	r21,0(fp)
   10ce8:	a8002216 	blt	r21,zero,10d74 <___svfprintf_internal_r+0x28c>
   10cec:	04c00044 	movi	r19,1
   10cf0:	0000b606 	br	10fcc <___svfprintf_internal_r+0x4e4>
   10cf4:	28801d60 	cmpeqi	r2,r5,117
   10cf8:	1000b01e 	bne	r2,zero,10fbc <___svfprintf_internal_r+0x4d4>
   10cfc:	28801e20 	cmpeqi	r2,r5,120
   10d00:	103fed1e 	bne	r2,zero,10cb8 <___svfprintf_internal_r+0x1d0>
   10d04:	29401ce0 	cmpeqi	r5,r5,115
   10d08:	283f8e26 	beq	r5,zero,10b44 <___svfprintf_internal_r+0x5c>
   10d0c:	e5400017 	ldw	r21,0(fp)
   10d10:	e0800104 	addi	r2,fp,4
   10d14:	d8800315 	stw	r2,12(sp)
   10d18:	a809883a 	mov	r4,r21
   10d1c:	00110e40 	call	110e4 <strlen>
   10d20:	888fc83a 	sub	r7,r17,r2
   10d24:	1039883a 	mov	fp,r2
   10d28:	01c0080e 	bge	zero,r7,10d4c <___svfprintf_internal_r+0x264>
   10d2c:	01800804 	movi	r6,32
   10d30:	b80b883a 	mov	r5,r23
   10d34:	8009883a 	mov	r4,r16
   10d38:	d9c00415 	stw	r7,16(sp)
   10d3c:	0010a7c0 	call	10a7c <print_repeat>
   10d40:	103f9f1e 	bne	r2,zero,10bc0 <___svfprintf_internal_r+0xd8>
   10d44:	d9c00417 	ldw	r7,16(sp)
   10d48:	b1ed883a 	add	r22,r22,r7
   10d4c:	b8800117 	ldw	r2,4(r23)
   10d50:	e00f883a 	mov	r7,fp
   10d54:	a80d883a 	mov	r6,r21
   10d58:	b80b883a 	mov	r5,r23
   10d5c:	8009883a 	mov	r4,r16
   10d60:	103ee83a 	callr	r2
   10d64:	103f961e 	bne	r2,zero,10bc0 <___svfprintf_internal_r+0xd8>
   10d68:	b72d883a 	add	r22,r22,fp
   10d6c:	df000317 	ldw	fp,12(sp)
   10d70:	003f7806 	br	10b54 <___svfprintf_internal_r+0x6c>
   10d74:	056bc83a 	sub	r21,zero,r21
   10d78:	04c00044 	movi	r19,1
   10d7c:	00c00044 	movi	r3,1
   10d80:	df000804 	addi	fp,sp,32
   10d84:	e00d883a 	mov	r6,fp
   10d88:	a8002e1e 	bne	r21,zero,10e44 <___svfprintf_internal_r+0x35c>
   10d8c:	e185c83a 	sub	r2,fp,r6
   10d90:	d8800315 	stw	r2,12(sp)
   10d94:	9085c83a 	sub	r2,r18,r2
   10d98:	0080090e 	bge	zero,r2,10dc0 <___svfprintf_internal_r+0x2d8>
   10d9c:	e085883a 	add	r2,fp,r2
   10da0:	d9001004 	addi	r4,sp,64
   10da4:	e100042e 	bgeu	fp,r4,10db8 <___svfprintf_internal_r+0x2d0>
   10da8:	e7000044 	addi	fp,fp,1
   10dac:	01000c04 	movi	r4,48
   10db0:	e13fffc5 	stb	r4,-1(fp)
   10db4:	e0bffa1e 	bne	fp,r2,10da0 <___svfprintf_internal_r+0x2b8>
   10db8:	e185c83a 	sub	r2,fp,r6
   10dbc:	d8800315 	stw	r2,12(sp)
   10dc0:	d8800317 	ldw	r2,12(sp)
   10dc4:	1897883a 	add	r11,r3,r2
   10dc8:	d8800017 	ldw	r2,0(sp)
   10dcc:	8aebc83a 	sub	r21,r17,r11
   10dd0:	10003126 	beq	r2,zero,10e98 <___svfprintf_internal_r+0x3b0>
   10dd4:	18000a26 	beq	r3,zero,10e00 <___svfprintf_internal_r+0x318>
   10dd8:	00800b44 	movi	r2,45
   10ddc:	d88007c5 	stb	r2,31(sp)
   10de0:	b8800117 	ldw	r2,4(r23)
   10de4:	01c00044 	movi	r7,1
   10de8:	d98007c4 	addi	r6,sp,31
   10dec:	b80b883a 	mov	r5,r23
   10df0:	8009883a 	mov	r4,r16
   10df4:	103ee83a 	callr	r2
   10df8:	103f711e 	bne	r2,zero,10bc0 <___svfprintf_internal_r+0xd8>
   10dfc:	b5800044 	addi	r22,r22,1
   10e00:	0540070e 	bge	zero,r21,10e20 <___svfprintf_internal_r+0x338>
   10e04:	a80f883a 	mov	r7,r21
   10e08:	01800c04 	movi	r6,48
   10e0c:	b80b883a 	mov	r5,r23
   10e10:	8009883a 	mov	r4,r16
   10e14:	0010a7c0 	call	10a7c <print_repeat>
   10e18:	103f691e 	bne	r2,zero,10bc0 <___svfprintf_internal_r+0xd8>
   10e1c:	b56d883a 	add	r22,r22,r21
   10e20:	d8800317 	ldw	r2,12(sp)
   10e24:	b72d883a 	add	r22,r22,fp
   10e28:	172bc83a 	sub	r21,r2,fp
   10e2c:	af05883a 	add	r2,r21,fp
   10e30:	b707c83a 	sub	r3,r22,fp
   10e34:	00802e16 	blt	zero,r2,10ef0 <___svfprintf_internal_r+0x408>
   10e38:	df000417 	ldw	fp,16(sp)
   10e3c:	182d883a 	mov	r22,r3
   10e40:	003f4006 	br	10b44 <___svfprintf_internal_r+0x5c>
   10e44:	a809883a 	mov	r4,r21
   10e48:	a00b883a 	mov	r5,r20
   10e4c:	d8c00315 	stw	r3,12(sp)
   10e50:	00111f40 	call	111f4 <__udivsi3>
   10e54:	1509383a 	mul	r4,r2,r20
   10e58:	d8c00317 	ldw	r3,12(sp)
   10e5c:	d9800804 	addi	r6,sp,32
   10e60:	a92bc83a 	sub	r21,r21,r4
   10e64:	a9000288 	cmpgei	r4,r21,10
   10e68:	2000051e 	bne	r4,zero,10e80 <___svfprintf_internal_r+0x398>
   10e6c:	ad400c04 	addi	r21,r21,48
   10e70:	e7000044 	addi	fp,fp,1
   10e74:	e57fffc5 	stb	r21,-1(fp)
   10e78:	102b883a 	mov	r21,r2
   10e7c:	003fc206 	br	10d88 <___svfprintf_internal_r+0x2a0>
   10e80:	d9000217 	ldw	r4,8(sp)
   10e84:	20000226 	beq	r4,zero,10e90 <___svfprintf_internal_r+0x3a8>
   10e88:	ad400dc4 	addi	r21,r21,55
   10e8c:	003ff806 	br	10e70 <___svfprintf_internal_r+0x388>
   10e90:	ad4015c4 	addi	r21,r21,87
   10e94:	003ff606 	br	10e70 <___svfprintf_internal_r+0x388>
   10e98:	0540090e 	bge	zero,r21,10ec0 <___svfprintf_internal_r+0x3d8>
   10e9c:	a80f883a 	mov	r7,r21
   10ea0:	01800804 	movi	r6,32
   10ea4:	b80b883a 	mov	r5,r23
   10ea8:	8009883a 	mov	r4,r16
   10eac:	d8c00615 	stw	r3,24(sp)
   10eb0:	0010a7c0 	call	10a7c <print_repeat>
   10eb4:	103f421e 	bne	r2,zero,10bc0 <___svfprintf_internal_r+0xd8>
   10eb8:	d8c00617 	ldw	r3,24(sp)
   10ebc:	b56d883a 	add	r22,r22,r21
   10ec0:	183fd726 	beq	r3,zero,10e20 <___svfprintf_internal_r+0x338>
   10ec4:	00800b44 	movi	r2,45
   10ec8:	d88007c5 	stb	r2,31(sp)
   10ecc:	b8800117 	ldw	r2,4(r23)
   10ed0:	01c00044 	movi	r7,1
   10ed4:	d98007c4 	addi	r6,sp,31
   10ed8:	b80b883a 	mov	r5,r23
   10edc:	8009883a 	mov	r4,r16
   10ee0:	103ee83a 	callr	r2
   10ee4:	103f361e 	bne	r2,zero,10bc0 <___svfprintf_internal_r+0xd8>
   10ee8:	b5800044 	addi	r22,r22,1
   10eec:	003fcc06 	br	10e20 <___svfprintf_internal_r+0x338>
   10ef0:	e0bfffc3 	ldbu	r2,-1(fp)
   10ef4:	01c00044 	movi	r7,1
   10ef8:	d98007c4 	addi	r6,sp,31
   10efc:	d88007c5 	stb	r2,31(sp)
   10f00:	b8800117 	ldw	r2,4(r23)
   10f04:	b80b883a 	mov	r5,r23
   10f08:	8009883a 	mov	r4,r16
   10f0c:	e73fffc4 	addi	fp,fp,-1
   10f10:	103ee83a 	callr	r2
   10f14:	103fc526 	beq	r2,zero,10e2c <___svfprintf_internal_r+0x344>
   10f18:	003f2906 	br	10bc0 <___svfprintf_internal_r+0xd8>
   10f1c:	88800090 	cmplti	r2,r17,2
   10f20:	1000081e 	bne	r2,zero,10f44 <___svfprintf_internal_r+0x45c>
   10f24:	8d7fffc4 	addi	r21,r17,-1
   10f28:	a80f883a 	mov	r7,r21
   10f2c:	01800804 	movi	r6,32
   10f30:	b80b883a 	mov	r5,r23
   10f34:	8009883a 	mov	r4,r16
   10f38:	0010a7c0 	call	10a7c <print_repeat>
   10f3c:	103f201e 	bne	r2,zero,10bc0 <___svfprintf_internal_r+0xd8>
   10f40:	b56d883a 	add	r22,r22,r21
   10f44:	e0800017 	ldw	r2,0(fp)
   10f48:	01c00044 	movi	r7,1
   10f4c:	d9800804 	addi	r6,sp,32
   10f50:	d8800805 	stb	r2,32(sp)
   10f54:	b8800117 	ldw	r2,4(r23)
   10f58:	b80b883a 	mov	r5,r23
   10f5c:	8009883a 	mov	r4,r16
   10f60:	e5400104 	addi	r21,fp,4
   10f64:	103ee83a 	callr	r2
   10f68:	103f151e 	bne	r2,zero,10bc0 <___svfprintf_internal_r+0xd8>
   10f6c:	b5800044 	addi	r22,r22,1
   10f70:	a839883a 	mov	fp,r21
   10f74:	003ef706 	br	10b54 <___svfprintf_internal_r+0x6c>
   10f78:	d8000215 	stw	zero,8(sp)
   10f7c:	d8000115 	stw	zero,4(sp)
   10f80:	d8000015 	stw	zero,0(sp)
   10f84:	04c00044 	movi	r19,1
   10f88:	05000284 	movi	r20,10
   10f8c:	04bfffc4 	movi	r18,-1
   10f90:	047fffc4 	movi	r17,-1
   10f94:	00800044 	movi	r2,1
   10f98:	003eee06 	br	10b54 <___svfprintf_internal_r+0x6c>
   10f9c:	00800044 	movi	r2,1
   10fa0:	d8800015 	stw	r2,0(sp)
   10fa4:	003efa06 	br	10b90 <___svfprintf_internal_r+0xa8>
   10fa8:	00800044 	movi	r2,1
   10fac:	d8800115 	stw	r2,4(sp)
   10fb0:	008000c4 	movi	r2,3
   10fb4:	003ee706 	br	10b54 <___svfprintf_internal_r+0x6c>
   10fb8:	05000204 	movi	r20,8
   10fbc:	e0800104 	addi	r2,fp,4
   10fc0:	d8800415 	stw	r2,16(sp)
   10fc4:	e5400017 	ldw	r21,0(fp)
   10fc8:	0027883a 	mov	r19,zero
   10fcc:	0007883a 	mov	r3,zero
   10fd0:	003f6b06 	br	10d80 <___svfprintf_internal_r+0x298>

00010fd4 <__vfprintf_internal_unused>:
   10fd4:	00800074 	movhi	r2,1
   10fd8:	300f883a 	mov	r7,r6
   10fdc:	280d883a 	mov	r6,r5
   10fe0:	200b883a 	mov	r5,r4
   10fe4:	110dfe17 	ldw	r4,14328(r2)
   10fe8:	0010ae81 	jmpi	10ae8 <___svfprintf_internal_r>

00010fec <__sfvwrite_small_str>:
   10fec:	2880000b 	ldhu	r2,0(r5)
   10ff0:	defffd04 	addi	sp,sp,-12
   10ff4:	dc000015 	stw	r16,0(sp)
   10ff8:	dfc00215 	stw	ra,8(sp)
   10ffc:	dc400115 	stw	r17,4(sp)
   11000:	10c0020c 	andi	r3,r2,8
   11004:	2821883a 	mov	r16,r5
   11008:	18001c26 	beq	r3,zero,1107c <__sfvwrite_small_str+0x90>
   1100c:	28c0008f 	ldh	r3,2(r5)
   11010:	1800180e 	bge	r3,zero,11074 <__sfvwrite_small_str+0x88>
   11014:	10c0800c 	andi	r3,r2,512
   11018:	18001626 	beq	r3,zero,11074 <__sfvwrite_small_str+0x88>
   1101c:	84400517 	ldw	r17,20(r16)
   11020:	300b883a 	mov	r5,r6
   11024:	89c0020e 	bge	r17,r7,11030 <__sfvwrite_small_str+0x44>
   11028:	10c0200c 	andi	r3,r2,128
   1102c:	1800111e 	bne	r3,zero,11074 <__sfvwrite_small_str+0x88>
   11030:	3c40010e 	bge	r7,r17,11038 <__sfvwrite_small_str+0x4c>
   11034:	3823883a 	mov	r17,r7
   11038:	81000417 	ldw	r4,16(r16)
   1103c:	880d883a 	mov	r6,r17
   11040:	00110840 	call	11084 <memmove>
   11044:	80800517 	ldw	r2,20(r16)
   11048:	1445c83a 	sub	r2,r2,r17
   1104c:	80800515 	stw	r2,20(r16)
   11050:	80800417 	ldw	r2,16(r16)
   11054:	1445883a 	add	r2,r2,r17
   11058:	80800415 	stw	r2,16(r16)
   1105c:	0005883a 	mov	r2,zero
   11060:	dfc00217 	ldw	ra,8(sp)
   11064:	dc400117 	ldw	r17,4(sp)
   11068:	dc000017 	ldw	r16,0(sp)
   1106c:	dec00304 	addi	sp,sp,12
   11070:	f800283a 	ret
   11074:	10801014 	ori	r2,r2,64
   11078:	8080000d 	sth	r2,0(r16)
   1107c:	00bfffc4 	movi	r2,-1
   11080:	003ff706 	br	11060 <__sfvwrite_small_str+0x74>

00011084 <memmove>:
   11084:	2005883a 	mov	r2,r4
   11088:	2900142e 	bgeu	r5,r4,110dc <memmove+0x58>
   1108c:	298f883a 	add	r7,r5,r6
   11090:	21c0122e 	bgeu	r4,r7,110dc <memmove+0x58>
   11094:	018a303a 	nor	r5,zero,r6
   11098:	0007883a 	mov	r3,zero
   1109c:	18ffffc4 	addi	r3,r3,-1
   110a0:	28c0011e 	bne	r5,r3,110a8 <memmove+0x24>
   110a4:	f800283a 	ret
   110a8:	38c9883a 	add	r4,r7,r3
   110ac:	22000003 	ldbu	r8,0(r4)
   110b0:	30c9883a 	add	r4,r6,r3
   110b4:	1109883a 	add	r4,r2,r4
   110b8:	22000005 	stb	r8,0(r4)
   110bc:	003ff706 	br	1109c <memmove+0x18>
   110c0:	28c9883a 	add	r4,r5,r3
   110c4:	21c00003 	ldbu	r7,0(r4)
   110c8:	10c9883a 	add	r4,r2,r3
   110cc:	18c00044 	addi	r3,r3,1
   110d0:	21c00005 	stb	r7,0(r4)
   110d4:	30fffa1e 	bne	r6,r3,110c0 <memmove+0x3c>
   110d8:	f800283a 	ret
   110dc:	0007883a 	mov	r3,zero
   110e0:	003ffc06 	br	110d4 <memmove+0x50>

000110e4 <strlen>:
   110e4:	2005883a 	mov	r2,r4
   110e8:	10c00007 	ldb	r3,0(r2)
   110ec:	1800021e 	bne	r3,zero,110f8 <strlen+0x14>
   110f0:	1105c83a 	sub	r2,r2,r4
   110f4:	f800283a 	ret
   110f8:	10800044 	addi	r2,r2,1
   110fc:	003ffa06 	br	110e8 <strlen+0x4>

00011100 <__divsi3>:
   11100:	20001a16 	blt	r4,zero,1116c <__divsi3+0x6c>
   11104:	000f883a 	mov	r7,zero
   11108:	2800020e 	bge	r5,zero,11114 <__divsi3+0x14>
   1110c:	014bc83a 	sub	r5,zero,r5
   11110:	39c0005c 	xori	r7,r7,1
   11114:	200d883a 	mov	r6,r4
   11118:	00c00044 	movi	r3,1
   1111c:	2900092e 	bgeu	r5,r4,11144 <__divsi3+0x44>
   11120:	00800804 	movi	r2,32
   11124:	00c00044 	movi	r3,1
   11128:	00000106 	br	11130 <__divsi3+0x30>
   1112c:	10001226 	beq	r2,zero,11178 <__divsi3+0x78>
   11130:	294b883a 	add	r5,r5,r5
   11134:	10bfffc4 	addi	r2,r2,-1
   11138:	18c7883a 	add	r3,r3,r3
   1113c:	293ffb36 	bltu	r5,r4,1112c <__divsi3+0x2c>
   11140:	18000d26 	beq	r3,zero,11178 <__divsi3+0x78>
   11144:	0005883a 	mov	r2,zero
   11148:	31400236 	bltu	r6,r5,11154 <__divsi3+0x54>
   1114c:	314dc83a 	sub	r6,r6,r5
   11150:	10c4b03a 	or	r2,r2,r3
   11154:	1806d07a 	srli	r3,r3,1
   11158:	280ad07a 	srli	r5,r5,1
   1115c:	183ffa1e 	bne	r3,zero,11148 <__divsi3+0x48>
   11160:	38000126 	beq	r7,zero,11168 <__divsi3+0x68>
   11164:	0085c83a 	sub	r2,zero,r2
   11168:	f800283a 	ret
   1116c:	0109c83a 	sub	r4,zero,r4
   11170:	01c00044 	movi	r7,1
   11174:	003fe406 	br	11108 <__divsi3+0x8>
   11178:	0005883a 	mov	r2,zero
   1117c:	003ff806 	br	11160 <__divsi3+0x60>

00011180 <__modsi3>:
   11180:	20001916 	blt	r4,zero,111e8 <__modsi3+0x68>
   11184:	000f883a 	mov	r7,zero
   11188:	2005883a 	mov	r2,r4
   1118c:	2800010e 	bge	r5,zero,11194 <__modsi3+0x14>
   11190:	014bc83a 	sub	r5,zero,r5
   11194:	00c00044 	movi	r3,1
   11198:	2900092e 	bgeu	r5,r4,111c0 <__modsi3+0x40>
   1119c:	01800804 	movi	r6,32
   111a0:	00c00044 	movi	r3,1
   111a4:	00000106 	br	111ac <__modsi3+0x2c>
   111a8:	30000d26 	beq	r6,zero,111e0 <__modsi3+0x60>
   111ac:	294b883a 	add	r5,r5,r5
   111b0:	31bfffc4 	addi	r6,r6,-1
   111b4:	18c7883a 	add	r3,r3,r3
   111b8:	293ffb36 	bltu	r5,r4,111a8 <__modsi3+0x28>
   111bc:	18000826 	beq	r3,zero,111e0 <__modsi3+0x60>
   111c0:	1806d07a 	srli	r3,r3,1
   111c4:	11400136 	bltu	r2,r5,111cc <__modsi3+0x4c>
   111c8:	1145c83a 	sub	r2,r2,r5
   111cc:	280ad07a 	srli	r5,r5,1
   111d0:	183ffb1e 	bne	r3,zero,111c0 <__modsi3+0x40>
   111d4:	38000126 	beq	r7,zero,111dc <__modsi3+0x5c>
   111d8:	0085c83a 	sub	r2,zero,r2
   111dc:	f800283a 	ret
   111e0:	2005883a 	mov	r2,r4
   111e4:	003ffb06 	br	111d4 <__modsi3+0x54>
   111e8:	0109c83a 	sub	r4,zero,r4
   111ec:	01c00044 	movi	r7,1
   111f0:	003fe506 	br	11188 <__modsi3+0x8>

000111f4 <__udivsi3>:
   111f4:	200d883a 	mov	r6,r4
   111f8:	2900152e 	bgeu	r5,r4,11250 <__udivsi3+0x5c>
   111fc:	28001416 	blt	r5,zero,11250 <__udivsi3+0x5c>
   11200:	00800804 	movi	r2,32
   11204:	00c00044 	movi	r3,1
   11208:	00000206 	br	11214 <__udivsi3+0x20>
   1120c:	10000e26 	beq	r2,zero,11248 <__udivsi3+0x54>
   11210:	28000516 	blt	r5,zero,11228 <__udivsi3+0x34>
   11214:	294b883a 	add	r5,r5,r5
   11218:	10bfffc4 	addi	r2,r2,-1
   1121c:	18c7883a 	add	r3,r3,r3
   11220:	293ffa36 	bltu	r5,r4,1120c <__udivsi3+0x18>
   11224:	18000826 	beq	r3,zero,11248 <__udivsi3+0x54>
   11228:	0005883a 	mov	r2,zero
   1122c:	31400236 	bltu	r6,r5,11238 <__udivsi3+0x44>
   11230:	314dc83a 	sub	r6,r6,r5
   11234:	10c4b03a 	or	r2,r2,r3
   11238:	1806d07a 	srli	r3,r3,1
   1123c:	280ad07a 	srli	r5,r5,1
   11240:	183ffa1e 	bne	r3,zero,1122c <__udivsi3+0x38>
   11244:	f800283a 	ret
   11248:	0005883a 	mov	r2,zero
   1124c:	f800283a 	ret
   11250:	00c00044 	movi	r3,1
   11254:	003ff406 	br	11228 <__udivsi3+0x34>

00011258 <__umodsi3>:
   11258:	2005883a 	mov	r2,r4
   1125c:	2900132e 	bgeu	r5,r4,112ac <__umodsi3+0x54>
   11260:	28001216 	blt	r5,zero,112ac <__umodsi3+0x54>
   11264:	01800804 	movi	r6,32
   11268:	00c00044 	movi	r3,1
   1126c:	00000206 	br	11278 <__umodsi3+0x20>
   11270:	30000c26 	beq	r6,zero,112a4 <__umodsi3+0x4c>
   11274:	28000516 	blt	r5,zero,1128c <__umodsi3+0x34>
   11278:	294b883a 	add	r5,r5,r5
   1127c:	31bfffc4 	addi	r6,r6,-1
   11280:	18c7883a 	add	r3,r3,r3
   11284:	293ffa36 	bltu	r5,r4,11270 <__umodsi3+0x18>
   11288:	18000626 	beq	r3,zero,112a4 <__umodsi3+0x4c>
   1128c:	1806d07a 	srli	r3,r3,1
   11290:	11400136 	bltu	r2,r5,11298 <__umodsi3+0x40>
   11294:	1145c83a 	sub	r2,r2,r5
   11298:	280ad07a 	srli	r5,r5,1
   1129c:	183ffb1e 	bne	r3,zero,1128c <__umodsi3+0x34>
   112a0:	f800283a 	ret
   112a4:	2005883a 	mov	r2,r4
   112a8:	f800283a 	ret
   112ac:	00c00044 	movi	r3,1
   112b0:	003ff606 	br	1128c <__umodsi3+0x34>

000112b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   112b4:	defffc04 	addi	sp,sp,-16
   112b8:	df000315 	stw	fp,12(sp)
   112bc:	df000304 	addi	fp,sp,12
   112c0:	e13fff15 	stw	r4,-4(fp)
   112c4:	e17ffe15 	stw	r5,-8(fp)
   112c8:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   112cc:	e0fffe17 	ldw	r3,-8(fp)
   112d0:	e0bfff17 	ldw	r2,-4(fp)
   112d4:	18800c26 	beq	r3,r2,11308 <alt_load_section+0x54>
  {
    while( to != end )
   112d8:	00000806 	br	112fc <alt_load_section+0x48>
    {
      *to++ = *from++;
   112dc:	e0ffff17 	ldw	r3,-4(fp)
   112e0:	18800104 	addi	r2,r3,4
   112e4:	e0bfff15 	stw	r2,-4(fp)
   112e8:	e0bffe17 	ldw	r2,-8(fp)
   112ec:	11000104 	addi	r4,r2,4
   112f0:	e13ffe15 	stw	r4,-8(fp)
   112f4:	18c00017 	ldw	r3,0(r3)
   112f8:	10c00015 	stw	r3,0(r2)
    while( to != end )
   112fc:	e0fffe17 	ldw	r3,-8(fp)
   11300:	e0bffd17 	ldw	r2,-12(fp)
   11304:	18bff51e 	bne	r3,r2,112dc <alt_load_section+0x28>
    }
  }
}
   11308:	0001883a 	nop
   1130c:	e037883a 	mov	sp,fp
   11310:	df000017 	ldw	fp,0(sp)
   11314:	dec00104 	addi	sp,sp,4
   11318:	f800283a 	ret

0001131c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1131c:	defffe04 	addi	sp,sp,-8
   11320:	dfc00115 	stw	ra,4(sp)
   11324:	df000015 	stw	fp,0(sp)
   11328:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1132c:	01800074 	movhi	r6,1
   11330:	318e0804 	addi	r6,r6,14368
   11334:	01400074 	movhi	r5,1
   11338:	294d4404 	addi	r5,r5,13584
   1133c:	01000074 	movhi	r4,1
   11340:	210e0804 	addi	r4,r4,14368
   11344:	00112b40 	call	112b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11348:	01800074 	movhi	r6,1
   1134c:	31808e04 	addi	r6,r6,568
   11350:	01400074 	movhi	r5,1
   11354:	29400804 	addi	r5,r5,32
   11358:	01000074 	movhi	r4,1
   1135c:	21000804 	addi	r4,r4,32
   11360:	00112b40 	call	112b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11364:	01800074 	movhi	r6,1
   11368:	318d4404 	addi	r6,r6,13584
   1136c:	01400074 	movhi	r5,1
   11370:	294cf604 	addi	r5,r5,13272
   11374:	01000074 	movhi	r4,1
   11378:	210cf604 	addi	r4,r4,13272
   1137c:	00112b40 	call	112b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11380:	00122100 	call	12210 <alt_dcache_flush_all>
  alt_icache_flush_all();
   11384:	00123fc0 	call	123fc <alt_icache_flush_all>
}
   11388:	0001883a 	nop
   1138c:	e037883a 	mov	sp,fp
   11390:	dfc00117 	ldw	ra,4(sp)
   11394:	df000017 	ldw	fp,0(sp)
   11398:	dec00204 	addi	sp,sp,8
   1139c:	f800283a 	ret

000113a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   113a0:	defffd04 	addi	sp,sp,-12
   113a4:	dfc00215 	stw	ra,8(sp)
   113a8:	df000115 	stw	fp,4(sp)
   113ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   113b0:	0009883a 	mov	r4,zero
   113b4:	00116cc0 	call	116cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   113b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   113bc:	00117080 	call	11708 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   113c0:	01800074 	movhi	r6,1
   113c4:	318d3504 	addi	r6,r6,13524
   113c8:	01400074 	movhi	r5,1
   113cc:	294d3504 	addi	r5,r5,13524
   113d0:	01000074 	movhi	r4,1
   113d4:	210d3504 	addi	r4,r4,13524
   113d8:	00127780 	call	12778 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   113dc:	d0a0cf17 	ldw	r2,-31940(gp)
   113e0:	d0e0d017 	ldw	r3,-31936(gp)
   113e4:	d120d117 	ldw	r4,-31932(gp)
   113e8:	200d883a 	mov	r6,r4
   113ec:	180b883a 	mov	r5,r3
   113f0:	1009883a 	mov	r4,r2
   113f4:	00105b80 	call	105b8 <main>
   113f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   113fc:	01000044 	movi	r4,1
   11400:	00121400 	call	12140 <close>
  exit (result);
   11404:	e13fff17 	ldw	r4,-4(fp)
   11408:	0012f340 	call	12f34 <exit>

0001140c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1140c:	defff204 	addi	sp,sp,-56
   11410:	dfc00a15 	stw	ra,40(sp)
   11414:	df000915 	stw	fp,36(sp)
   11418:	df000904 	addi	fp,sp,36
   1141c:	e13ff715 	stw	r4,-36(fp)
   11420:	e1400215 	stw	r5,8(fp)
   11424:	e1800315 	stw	r6,12(fp)
   11428:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   1142c:	e0800204 	addi	r2,fp,8
   11430:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   11434:	e0bff717 	ldw	r2,-36(fp)
   11438:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   1143c:	00006f06 	br	115fc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11440:	e0bffec7 	ldb	r2,-5(fp)
   11444:	10800960 	cmpeqi	r2,r2,37
   11448:	1000041e 	bne	r2,zero,1145c <alt_printf+0x50>
        {
            alt_putchar(c);
   1144c:	e0bffec7 	ldb	r2,-5(fp)
   11450:	1009883a 	mov	r4,r2
   11454:	00116380 	call	11638 <alt_putchar>
   11458:	00006806 	br	115fc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   1145c:	e0bfff17 	ldw	r2,-4(fp)
   11460:	10c00044 	addi	r3,r2,1
   11464:	e0ffff15 	stw	r3,-4(fp)
   11468:	10800003 	ldbu	r2,0(r2)
   1146c:	e0bffec5 	stb	r2,-5(fp)
   11470:	e0bffec7 	ldb	r2,-5(fp)
   11474:	10006926 	beq	r2,zero,1161c <alt_printf+0x210>
            {
                if (c == '%')
   11478:	e0bffec7 	ldb	r2,-5(fp)
   1147c:	10800958 	cmpnei	r2,r2,37
   11480:	1000041e 	bne	r2,zero,11494 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   11484:	e0bffec7 	ldb	r2,-5(fp)
   11488:	1009883a 	mov	r4,r2
   1148c:	00116380 	call	11638 <alt_putchar>
   11490:	00005a06 	br	115fc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   11494:	e0bffec7 	ldb	r2,-5(fp)
   11498:	108018d8 	cmpnei	r2,r2,99
   1149c:	1000081e 	bne	r2,zero,114c0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   114a0:	e0bff817 	ldw	r2,-32(fp)
   114a4:	10c00104 	addi	r3,r2,4
   114a8:	e0fff815 	stw	r3,-32(fp)
   114ac:	10800017 	ldw	r2,0(r2)
   114b0:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   114b4:	e13ff917 	ldw	r4,-28(fp)
   114b8:	00116380 	call	11638 <alt_putchar>
   114bc:	00004f06 	br	115fc <alt_printf+0x1f0>
                }
                else if (c == 'x')
   114c0:	e0bffec7 	ldb	r2,-5(fp)
   114c4:	10801e18 	cmpnei	r2,r2,120
   114c8:	1000341e 	bne	r2,zero,1159c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   114cc:	e0bff817 	ldw	r2,-32(fp)
   114d0:	10c00104 	addi	r3,r2,4
   114d4:	e0fff815 	stw	r3,-32(fp)
   114d8:	10800017 	ldw	r2,0(r2)
   114dc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   114e0:	e0bffb17 	ldw	r2,-20(fp)
   114e4:	1000031e 	bne	r2,zero,114f4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   114e8:	01000c04 	movi	r4,48
   114ec:	00116380 	call	11638 <alt_putchar>
                        continue;
   114f0:	00004206 	br	115fc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   114f4:	00800704 	movi	r2,28
   114f8:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   114fc:	00000306 	br	1150c <alt_printf+0x100>
                        digit_shift -= 4;
   11500:	e0bffd17 	ldw	r2,-12(fp)
   11504:	10bfff04 	addi	r2,r2,-4
   11508:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   1150c:	00c003c4 	movi	r3,15
   11510:	e0bffd17 	ldw	r2,-12(fp)
   11514:	1884983a 	sll	r2,r3,r2
   11518:	1007883a 	mov	r3,r2
   1151c:	e0bffb17 	ldw	r2,-20(fp)
   11520:	1884703a 	and	r2,r3,r2
   11524:	103ff626 	beq	r2,zero,11500 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   11528:	00001906 	br	11590 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1152c:	00c003c4 	movi	r3,15
   11530:	e0bffd17 	ldw	r2,-12(fp)
   11534:	1884983a 	sll	r2,r3,r2
   11538:	1007883a 	mov	r3,r2
   1153c:	e0bffb17 	ldw	r2,-20(fp)
   11540:	1886703a 	and	r3,r3,r2
   11544:	e0bffd17 	ldw	r2,-12(fp)
   11548:	1884d83a 	srl	r2,r3,r2
   1154c:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   11550:	e0bffa17 	ldw	r2,-24(fp)
   11554:	108002a8 	cmpgeui	r2,r2,10
   11558:	1000041e 	bne	r2,zero,1156c <alt_printf+0x160>
                            c = '0' + digit;
   1155c:	e0bffa17 	ldw	r2,-24(fp)
   11560:	10800c04 	addi	r2,r2,48
   11564:	e0bffec5 	stb	r2,-5(fp)
   11568:	00000306 	br	11578 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   1156c:	e0bffa17 	ldw	r2,-24(fp)
   11570:	108015c4 	addi	r2,r2,87
   11574:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   11578:	e0bffec7 	ldb	r2,-5(fp)
   1157c:	1009883a 	mov	r4,r2
   11580:	00116380 	call	11638 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   11584:	e0bffd17 	ldw	r2,-12(fp)
   11588:	10bfff04 	addi	r2,r2,-4
   1158c:	e0bffd15 	stw	r2,-12(fp)
   11590:	e0bffd17 	ldw	r2,-12(fp)
   11594:	103fe50e 	bge	r2,zero,1152c <alt_printf+0x120>
   11598:	00001806 	br	115fc <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   1159c:	e0bffec7 	ldb	r2,-5(fp)
   115a0:	10801cd8 	cmpnei	r2,r2,115
   115a4:	1000151e 	bne	r2,zero,115fc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   115a8:	e0bff817 	ldw	r2,-32(fp)
   115ac:	10c00104 	addi	r3,r2,4
   115b0:	e0fff815 	stw	r3,-32(fp)
   115b4:	10800017 	ldw	r2,0(r2)
   115b8:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   115bc:	00000906 	br	115e4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   115c0:	e0bffc17 	ldw	r2,-16(fp)
   115c4:	10c00044 	addi	r3,r2,1
   115c8:	e0fffc15 	stw	r3,-16(fp)
   115cc:	10800003 	ldbu	r2,0(r2)
   115d0:	10803fcc 	andi	r2,r2,255
   115d4:	1080201c 	xori	r2,r2,128
   115d8:	10bfe004 	addi	r2,r2,-128
   115dc:	1009883a 	mov	r4,r2
   115e0:	00116380 	call	11638 <alt_putchar>
                    while(*s)
   115e4:	e0bffc17 	ldw	r2,-16(fp)
   115e8:	10800003 	ldbu	r2,0(r2)
   115ec:	10803fcc 	andi	r2,r2,255
   115f0:	1080201c 	xori	r2,r2,128
   115f4:	10bfe004 	addi	r2,r2,-128
   115f8:	103ff11e 	bne	r2,zero,115c0 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
   115fc:	e0bfff17 	ldw	r2,-4(fp)
   11600:	10c00044 	addi	r3,r2,1
   11604:	e0ffff15 	stw	r3,-4(fp)
   11608:	10800003 	ldbu	r2,0(r2)
   1160c:	e0bffec5 	stb	r2,-5(fp)
   11610:	e0bffec7 	ldb	r2,-5(fp)
   11614:	103f8a1e 	bne	r2,zero,11440 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   11618:	00000106 	br	11620 <alt_printf+0x214>
                break;
   1161c:	0001883a 	nop
}
   11620:	0001883a 	nop
   11624:	e037883a 	mov	sp,fp
   11628:	dfc00117 	ldw	ra,4(sp)
   1162c:	df000017 	ldw	fp,0(sp)
   11630:	dec00504 	addi	sp,sp,20
   11634:	f800283a 	ret

00011638 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11638:	defffd04 	addi	sp,sp,-12
   1163c:	dfc00215 	stw	ra,8(sp)
   11640:	df000115 	stw	fp,4(sp)
   11644:	df000104 	addi	fp,sp,4
   11648:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   1164c:	e13fff17 	ldw	r4,-4(fp)
   11650:	0012f8c0 	call	12f8c <putchar>
#endif
#endif
}
   11654:	e037883a 	mov	sp,fp
   11658:	dfc00117 	ldw	ra,4(sp)
   1165c:	df000017 	ldw	fp,0(sp)
   11660:	dec00204 	addi	sp,sp,8
   11664:	f800283a 	ret

00011668 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   11668:	defffd04 	addi	sp,sp,-12
   1166c:	dfc00215 	stw	ra,8(sp)
   11670:	df000115 	stw	fp,4(sp)
   11674:	df000104 	addi	fp,sp,4
   11678:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1167c:	e13fff17 	ldw	r4,-4(fp)
   11680:	0011fac0 	call	11fac <alt_busy_sleep>
}
   11684:	e037883a 	mov	sp,fp
   11688:	dfc00117 	ldw	ra,4(sp)
   1168c:	df000017 	ldw	fp,0(sp)
   11690:	dec00204 	addi	sp,sp,8
   11694:	f800283a 	ret

00011698 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   11698:	defffd04 	addi	sp,sp,-12
   1169c:	dfc00215 	stw	ra,8(sp)
   116a0:	df000115 	stw	fp,4(sp)
   116a4:	df000104 	addi	fp,sp,4
   116a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   116ac:	d1600404 	addi	r5,gp,-32752
   116b0:	e13fff17 	ldw	r4,-4(fp)
   116b4:	00122c40 	call	122c4 <alt_dev_llist_insert>
}
   116b8:	e037883a 	mov	sp,fp
   116bc:	dfc00117 	ldw	ra,4(sp)
   116c0:	df000017 	ldw	fp,0(sp)
   116c4:	dec00204 	addi	sp,sp,8
   116c8:	f800283a 	ret

000116cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   116cc:	defffd04 	addi	sp,sp,-12
   116d0:	dfc00215 	stw	ra,8(sp)
   116d4:	df000115 	stw	fp,4(sp)
   116d8:	df000104 	addi	fp,sp,4
   116dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_0, nios2_0);
   116e0:	0012c400 	call	12c40 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   116e4:	00800044 	movi	r2,1
   116e8:	1001703a 	wrctl	status,r2
}
   116ec:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   116f0:	0001883a 	nop
   116f4:	e037883a 	mov	sp,fp
   116f8:	dfc00117 	ldw	ra,4(sp)
   116fc:	df000017 	ldw	fp,0(sp)
   11700:	dec00204 	addi	sp,sp,8
   11704:	f800283a 	ret

00011708 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11708:	defffe04 	addi	sp,sp,-8
   1170c:	dfc00115 	stw	ra,4(sp)
   11710:	df000015 	stw	fp,0(sp)
   11714:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   11718:	01c0fa04 	movi	r7,1000
   1171c:	01800044 	movi	r6,1
   11720:	000b883a 	mov	r5,zero
   11724:	010000b4 	movhi	r4,2
   11728:	21040004 	addi	r4,r4,4096
   1172c:	0011a2c0 	call	11a2c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   11730:	01000074 	movhi	r4,1
   11734:	210d7d04 	addi	r4,r4,13812
   11738:	00116980 	call	11698 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1173c:	0001883a 	nop
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD_16X2, lcd_16x2);
   11740:	01000074 	movhi	r4,1
   11744:	210d8804 	addi	r4,r4,13856
   11748:	0011b640 	call	11b64 <alt_up_character_lcd_init>
   1174c:	01000074 	movhi	r4,1
   11750:	210d8804 	addi	r4,r4,13856
   11754:	00116980 	call	11698 <alt_dev_reg>
}
   11758:	0001883a 	nop
   1175c:	e037883a 	mov	sp,fp
   11760:	dfc00117 	ldw	ra,4(sp)
   11764:	df000017 	ldw	fp,0(sp)
   11768:	dec00204 	addi	sp,sp,8
   1176c:	f800283a 	ret

00011770 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11770:	defffa04 	addi	sp,sp,-24
   11774:	dfc00515 	stw	ra,20(sp)
   11778:	df000415 	stw	fp,16(sp)
   1177c:	df000404 	addi	fp,sp,16
   11780:	e13ffe15 	stw	r4,-8(fp)
   11784:	e17ffd15 	stw	r5,-12(fp)
   11788:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1178c:	e0bffe17 	ldw	r2,-8(fp)
   11790:	10800017 	ldw	r2,0(r2)
   11794:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11798:	e0bfff17 	ldw	r2,-4(fp)
   1179c:	10c00a04 	addi	r3,r2,40
   117a0:	e0bffe17 	ldw	r2,-8(fp)
   117a4:	10800217 	ldw	r2,8(r2)
   117a8:	100f883a 	mov	r7,r2
   117ac:	e1bffc17 	ldw	r6,-16(fp)
   117b0:	e17ffd17 	ldw	r5,-12(fp)
   117b4:	1809883a 	mov	r4,r3
   117b8:	00118300 	call	11830 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   117bc:	e037883a 	mov	sp,fp
   117c0:	dfc00117 	ldw	ra,4(sp)
   117c4:	df000017 	ldw	fp,0(sp)
   117c8:	dec00204 	addi	sp,sp,8
   117cc:	f800283a 	ret

000117d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   117d0:	defffa04 	addi	sp,sp,-24
   117d4:	dfc00515 	stw	ra,20(sp)
   117d8:	df000415 	stw	fp,16(sp)
   117dc:	df000404 	addi	fp,sp,16
   117e0:	e13ffe15 	stw	r4,-8(fp)
   117e4:	e17ffd15 	stw	r5,-12(fp)
   117e8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   117ec:	e0bffe17 	ldw	r2,-8(fp)
   117f0:	10800017 	ldw	r2,0(r2)
   117f4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   117f8:	e0bfff17 	ldw	r2,-4(fp)
   117fc:	10c00a04 	addi	r3,r2,40
   11800:	e0bffe17 	ldw	r2,-8(fp)
   11804:	10800217 	ldw	r2,8(r2)
   11808:	100f883a 	mov	r7,r2
   1180c:	e1bffc17 	ldw	r6,-16(fp)
   11810:	e17ffd17 	ldw	r5,-12(fp)
   11814:	1809883a 	mov	r4,r3
   11818:	001191c0 	call	1191c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1181c:	e037883a 	mov	sp,fp
   11820:	dfc00117 	ldw	ra,4(sp)
   11824:	df000017 	ldw	fp,0(sp)
   11828:	dec00204 	addi	sp,sp,8
   1182c:	f800283a 	ret

00011830 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   11830:	defff704 	addi	sp,sp,-36
   11834:	df000815 	stw	fp,32(sp)
   11838:	df000804 	addi	fp,sp,32
   1183c:	e13ffb15 	stw	r4,-20(fp)
   11840:	e17ffa15 	stw	r5,-24(fp)
   11844:	e1bff915 	stw	r6,-28(fp)
   11848:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   1184c:	e0bffb17 	ldw	r2,-20(fp)
   11850:	10800017 	ldw	r2,0(r2)
   11854:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   11858:	e0bffa17 	ldw	r2,-24(fp)
   1185c:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   11860:	e0bff917 	ldw	r2,-28(fp)
   11864:	e0fffa17 	ldw	r3,-24(fp)
   11868:	1885883a 	add	r2,r3,r2
   1186c:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   11870:	00001206 	br	118bc <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11874:	e0bffe17 	ldw	r2,-8(fp)
   11878:	10800037 	ldwio	r2,0(r2)
   1187c:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   11880:	e0bffc17 	ldw	r2,-16(fp)
   11884:	10a0000c 	andi	r2,r2,32768
   11888:	10000626 	beq	r2,zero,118a4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1188c:	e0bfff17 	ldw	r2,-4(fp)
   11890:	10c00044 	addi	r3,r2,1
   11894:	e0ffff15 	stw	r3,-4(fp)
   11898:	e0fffc17 	ldw	r3,-16(fp)
   1189c:	10c00005 	stb	r3,0(r2)
   118a0:	00000606 	br	118bc <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   118a4:	e0ffff17 	ldw	r3,-4(fp)
   118a8:	e0bffa17 	ldw	r2,-24(fp)
   118ac:	1880071e 	bne	r3,r2,118cc <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   118b0:	e0bff817 	ldw	r2,-32(fp)
   118b4:	1090000c 	andi	r2,r2,16384
   118b8:	1000061e 	bne	r2,zero,118d4 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   118bc:	e0ffff17 	ldw	r3,-4(fp)
   118c0:	e0bffd17 	ldw	r2,-12(fp)
   118c4:	18bfeb36 	bltu	r3,r2,11874 <altera_avalon_jtag_uart_read+0x44>
   118c8:	00000306 	br	118d8 <altera_avalon_jtag_uart_read+0xa8>
      break;
   118cc:	0001883a 	nop
   118d0:	00000106 	br	118d8 <altera_avalon_jtag_uart_read+0xa8>
      break;   
   118d4:	0001883a 	nop
    
  }

  if (ptr != buffer)
   118d8:	e0ffff17 	ldw	r3,-4(fp)
   118dc:	e0bffa17 	ldw	r2,-24(fp)
   118e0:	18800426 	beq	r3,r2,118f4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   118e4:	e0ffff17 	ldw	r3,-4(fp)
   118e8:	e0bffa17 	ldw	r2,-24(fp)
   118ec:	1885c83a 	sub	r2,r3,r2
   118f0:	00000606 	br	1190c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   118f4:	e0bff817 	ldw	r2,-32(fp)
   118f8:	1090000c 	andi	r2,r2,16384
   118fc:	10000226 	beq	r2,zero,11908 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   11900:	00bffd44 	movi	r2,-11
   11904:	00000106 	br	1190c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   11908:	00bffec4 	movi	r2,-5
}
   1190c:	e037883a 	mov	sp,fp
   11910:	df000017 	ldw	fp,0(sp)
   11914:	dec00104 	addi	sp,sp,4
   11918:	f800283a 	ret

0001191c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1191c:	defff904 	addi	sp,sp,-28
   11920:	df000615 	stw	fp,24(sp)
   11924:	df000604 	addi	fp,sp,24
   11928:	e13ffd15 	stw	r4,-12(fp)
   1192c:	e17ffc15 	stw	r5,-16(fp)
   11930:	e1bffb15 	stw	r6,-20(fp)
   11934:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   11938:	e0bffd17 	ldw	r2,-12(fp)
   1193c:	10800017 	ldw	r2,0(r2)
   11940:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   11944:	e0bffb17 	ldw	r2,-20(fp)
   11948:	e0fffc17 	ldw	r3,-16(fp)
   1194c:	1885883a 	add	r2,r3,r2
   11950:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   11954:	00000e06 	br	11990 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11958:	e0bfff17 	ldw	r2,-4(fp)
   1195c:	10800104 	addi	r2,r2,4
   11960:	10800037 	ldwio	r2,0(r2)
   11964:	10bfffec 	andhi	r2,r2,65535
   11968:	10000926 	beq	r2,zero,11990 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1196c:	e0ffff17 	ldw	r3,-4(fp)
   11970:	e0bffc17 	ldw	r2,-16(fp)
   11974:	11000044 	addi	r4,r2,1
   11978:	e13ffc15 	stw	r4,-16(fp)
   1197c:	10800003 	ldbu	r2,0(r2)
   11980:	10803fcc 	andi	r2,r2,255
   11984:	1080201c 	xori	r2,r2,128
   11988:	10bfe004 	addi	r2,r2,-128
   1198c:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   11990:	e0fffc17 	ldw	r3,-16(fp)
   11994:	e0bffe17 	ldw	r2,-8(fp)
   11998:	18bfef36 	bltu	r3,r2,11958 <altera_avalon_jtag_uart_write+0x3c>

  return count;
   1199c:	e0bffb17 	ldw	r2,-20(fp)
}
   119a0:	e037883a 	mov	sp,fp
   119a4:	df000017 	ldw	fp,0(sp)
   119a8:	dec00104 	addi	sp,sp,4
   119ac:	f800283a 	ret

000119b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   119b0:	defffa04 	addi	sp,sp,-24
   119b4:	dfc00515 	stw	ra,20(sp)
   119b8:	df000415 	stw	fp,16(sp)
   119bc:	df000404 	addi	fp,sp,16
   119c0:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   119c4:	0007883a 	mov	r3,zero
   119c8:	e0bffc17 	ldw	r2,-16(fp)
   119cc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   119d0:	e0bffc17 	ldw	r2,-16(fp)
   119d4:	10800104 	addi	r2,r2,4
   119d8:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   119dc:	0005303a 	rdctl	r2,status
   119e0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119e4:	e0fffd17 	ldw	r3,-12(fp)
   119e8:	00bfff84 	movi	r2,-2
   119ec:	1884703a 	and	r2,r3,r2
   119f0:	1001703a 	wrctl	status,r2
  return context;
   119f4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   119f8:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   119fc:	0012b380 	call	12b38 <alt_tick>
   11a00:	e0bfff17 	ldw	r2,-4(fp)
   11a04:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   11a08:	e0bffe17 	ldw	r2,-8(fp)
   11a0c:	1001703a 	wrctl	status,r2
}
   11a10:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   11a14:	0001883a 	nop
   11a18:	e037883a 	mov	sp,fp
   11a1c:	dfc00117 	ldw	ra,4(sp)
   11a20:	df000017 	ldw	fp,0(sp)
   11a24:	dec00204 	addi	sp,sp,8
   11a28:	f800283a 	ret

00011a2c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11a2c:	defff804 	addi	sp,sp,-32
   11a30:	dfc00715 	stw	ra,28(sp)
   11a34:	df000615 	stw	fp,24(sp)
   11a38:	df000604 	addi	fp,sp,24
   11a3c:	e13ffe15 	stw	r4,-8(fp)
   11a40:	e17ffd15 	stw	r5,-12(fp)
   11a44:	e1bffc15 	stw	r6,-16(fp)
   11a48:	e1fffb15 	stw	r7,-20(fp)
   11a4c:	e0bffb17 	ldw	r2,-20(fp)
   11a50:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11a54:	d0a0d317 	ldw	r2,-31924(gp)
   11a58:	1000031e 	bne	r2,zero,11a68 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   11a5c:	e0bfff17 	ldw	r2,-4(fp)
   11a60:	d0a0d315 	stw	r2,-31924(gp)
    return 0;
   11a64:	00000106 	br	11a6c <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   11a68:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11a6c:	e0bffe17 	ldw	r2,-8(fp)
   11a70:	10800104 	addi	r2,r2,4
   11a74:	00c001c4 	movi	r3,7
   11a78:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11a7c:	d8000015 	stw	zero,0(sp)
   11a80:	e1fffe17 	ldw	r7,-8(fp)
   11a84:	01800074 	movhi	r6,1
   11a88:	31866c04 	addi	r6,r6,6576
   11a8c:	e17ffc17 	ldw	r5,-16(fp)
   11a90:	e13ffd17 	ldw	r4,-12(fp)
   11a94:	00124300 	call	12430 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11a98:	0001883a 	nop
   11a9c:	e037883a 	mov	sp,fp
   11aa0:	dfc00117 	ldw	ra,4(sp)
   11aa4:	df000017 	ldw	fp,0(sp)
   11aa8:	dec00204 	addi	sp,sp,8
   11aac:	f800283a 	ret

00011ab0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   11ab0:	defffc04 	addi	sp,sp,-16
   11ab4:	df000315 	stw	fp,12(sp)
   11ab8:	df000304 	addi	fp,sp,12
   11abc:	e13ffe15 	stw	r4,-8(fp)
   11ac0:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   11ac4:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
   11ac8:	e0bffd17 	ldw	r2,-12(fp)
   11acc:	1000061e 	bne	r2,zero,11ae8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   11ad0:	e0bffe17 	ldw	r2,-8(fp)
   11ad4:	1007883a 	mov	r3,r2
   11ad8:	e0bfffc3 	ldbu	r2,-1(fp)
   11adc:	10c4b03a 	or	r2,r2,r3
   11ae0:	e0bfffc5 	stb	r2,-1(fp)
   11ae4:	00000806 	br	11b08 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   11ae8:	e0bffe17 	ldw	r2,-8(fp)
   11aec:	1007883a 	mov	r3,r2
   11af0:	e0bfffc3 	ldbu	r2,-1(fp)
   11af4:	10c4b03a 	or	r2,r2,r3
   11af8:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
   11afc:	e0bfffc3 	ldbu	r2,-1(fp)
   11b00:	10801014 	ori	r2,r2,64
   11b04:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   11b08:	e0ffffc3 	ldbu	r3,-1(fp)
   11b0c:	00bfe004 	movi	r2,-128
   11b10:	1884b03a 	or	r2,r3,r2
}
   11b14:	e037883a 	mov	sp,fp
   11b18:	df000017 	ldw	fp,0(sp)
   11b1c:	dec00104 	addi	sp,sp,4
   11b20:	f800283a 	ret

00011b24 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   11b24:	defffd04 	addi	sp,sp,-12
   11b28:	df000215 	stw	fp,8(sp)
   11b2c:	df000204 	addi	fp,sp,8
   11b30:	e13fff15 	stw	r4,-4(fp)
   11b34:	2805883a 	mov	r2,r5
   11b38:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   11b3c:	e0bfff17 	ldw	r2,-4(fp)
   11b40:	10800a17 	ldw	r2,40(r2)
   11b44:	1007883a 	mov	r3,r2
   11b48:	e0bffe03 	ldbu	r2,-8(fp)
   11b4c:	18800025 	stbio	r2,0(r3)
}
   11b50:	0001883a 	nop
   11b54:	e037883a 	mov	sp,fp
   11b58:	df000017 	ldw	fp,0(sp)
   11b5c:	dec00104 	addi	sp,sp,4
   11b60:	f800283a 	ret

00011b64 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   11b64:	defffe04 	addi	sp,sp,-8
   11b68:	df000115 	stw	fp,4(sp)
   11b6c:	df000104 	addi	fp,sp,4
   11b70:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   11b74:	e0bfff17 	ldw	r2,-4(fp)
   11b78:	10800a17 	ldw	r2,40(r2)
   11b7c:	1007883a 	mov	r3,r2
   11b80:	00800044 	movi	r2,1
   11b84:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   11b88:	0001883a 	nop
   11b8c:	e037883a 	mov	sp,fp
   11b90:	df000017 	ldw	fp,0(sp)
   11b94:	dec00104 	addi	sp,sp,4
   11b98:	f800283a 	ret

00011b9c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   11b9c:	defffc04 	addi	sp,sp,-16
   11ba0:	dfc00315 	stw	ra,12(sp)
   11ba4:	df000215 	stw	fp,8(sp)
   11ba8:	df000204 	addi	fp,sp,8
   11bac:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   11bb0:	d1600404 	addi	r5,gp,-32752
   11bb4:	e13ffe17 	ldw	r4,-8(fp)
   11bb8:	001236c0 	call	1236c <alt_find_dev>
   11bbc:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   11bc0:	e0bfff17 	ldw	r2,-4(fp)
}
   11bc4:	e037883a 	mov	sp,fp
   11bc8:	dfc00117 	ldw	ra,4(sp)
   11bcc:	df000017 	ldw	fp,0(sp)
   11bd0:	dec00204 	addi	sp,sp,8
   11bd4:	f800283a 	ret

00011bd8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   11bd8:	defffb04 	addi	sp,sp,-20
   11bdc:	df000415 	stw	fp,16(sp)
   11be0:	df000404 	addi	fp,sp,16
   11be4:	e13ffe15 	stw	r4,-8(fp)
   11be8:	e17ffd15 	stw	r5,-12(fp)
   11bec:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   11bf0:	e03fff15 	stw	zero,-4(fp)
   11bf4:	00000f06 	br	11c34 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   11bf8:	e0bffe17 	ldw	r2,-8(fp)
   11bfc:	10800a17 	ldw	r2,40(r2)
   11c00:	10800044 	addi	r2,r2,1
   11c04:	1009883a 	mov	r4,r2
   11c08:	e0fffd17 	ldw	r3,-12(fp)
   11c0c:	e0bfff17 	ldw	r2,-4(fp)
   11c10:	1885883a 	add	r2,r3,r2
   11c14:	10800003 	ldbu	r2,0(r2)
   11c18:	10803fcc 	andi	r2,r2,255
   11c1c:	1080201c 	xori	r2,r2,128
   11c20:	10bfe004 	addi	r2,r2,-128
   11c24:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
   11c28:	e0bfff17 	ldw	r2,-4(fp)
   11c2c:	10800044 	addi	r2,r2,1
   11c30:	e0bfff15 	stw	r2,-4(fp)
   11c34:	e0ffff17 	ldw	r3,-4(fp)
   11c38:	e0bffc17 	ldw	r2,-16(fp)
   11c3c:	18bfee36 	bltu	r3,r2,11bf8 <alt_up_character_lcd_write+0x20>
	}
}
   11c40:	0001883a 	nop
   11c44:	0001883a 	nop
   11c48:	e037883a 	mov	sp,fp
   11c4c:	df000017 	ldw	fp,0(sp)
   11c50:	dec00104 	addi	sp,sp,4
   11c54:	f800283a 	ret

00011c58 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   11c58:	defffd04 	addi	sp,sp,-12
   11c5c:	df000215 	stw	fp,8(sp)
   11c60:	df000204 	addi	fp,sp,8
   11c64:	e13fff15 	stw	r4,-4(fp)
   11c68:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
   11c6c:	00000d06 	br	11ca4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   11c70:	e0bfff17 	ldw	r2,-4(fp)
   11c74:	10800a17 	ldw	r2,40(r2)
   11c78:	10800044 	addi	r2,r2,1
   11c7c:	1007883a 	mov	r3,r2
   11c80:	e0bffe17 	ldw	r2,-8(fp)
   11c84:	10800003 	ldbu	r2,0(r2)
   11c88:	10803fcc 	andi	r2,r2,255
   11c8c:	1080201c 	xori	r2,r2,128
   11c90:	10bfe004 	addi	r2,r2,-128
   11c94:	18800025 	stbio	r2,0(r3)
		++ptr;
   11c98:	e0bffe17 	ldw	r2,-8(fp)
   11c9c:	10800044 	addi	r2,r2,1
   11ca0:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
   11ca4:	e0bffe17 	ldw	r2,-8(fp)
   11ca8:	10800003 	ldbu	r2,0(r2)
   11cac:	10803fcc 	andi	r2,r2,255
   11cb0:	1080201c 	xori	r2,r2,128
   11cb4:	10bfe004 	addi	r2,r2,-128
   11cb8:	103fed1e 	bne	r2,zero,11c70 <alt_up_character_lcd_string+0x18>
	}
}
   11cbc:	0001883a 	nop
   11cc0:	0001883a 	nop
   11cc4:	e037883a 	mov	sp,fp
   11cc8:	df000017 	ldw	fp,0(sp)
   11ccc:	dec00104 	addi	sp,sp,4
   11cd0:	f800283a 	ret

00011cd4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   11cd4:	defffb04 	addi	sp,sp,-20
   11cd8:	dfc00415 	stw	ra,16(sp)
   11cdc:	df000315 	stw	fp,12(sp)
   11ce0:	df000304 	addi	fp,sp,12
   11ce4:	e13fff15 	stw	r4,-4(fp)
   11ce8:	e17ffe15 	stw	r5,-8(fp)
   11cec:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   11cf0:	e0bfff17 	ldw	r2,-4(fp)
   11cf4:	10800017 	ldw	r2,0(r2)
   11cf8:	e0fffd17 	ldw	r3,-12(fp)
   11cfc:	180d883a 	mov	r6,r3
   11d00:	e17ffe17 	ldw	r5,-8(fp)
   11d04:	1009883a 	mov	r4,r2
   11d08:	0011bd80 	call	11bd8 <alt_up_character_lcd_write>
	return 0;
   11d0c:	0005883a 	mov	r2,zero
}
   11d10:	e037883a 	mov	sp,fp
   11d14:	dfc00117 	ldw	ra,4(sp)
   11d18:	df000017 	ldw	fp,0(sp)
   11d1c:	dec00204 	addi	sp,sp,8
   11d20:	f800283a 	ret

00011d24 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   11d24:	defffa04 	addi	sp,sp,-24
   11d28:	dfc00515 	stw	ra,20(sp)
   11d2c:	df000415 	stw	fp,16(sp)
   11d30:	df000404 	addi	fp,sp,16
   11d34:	e13ffe15 	stw	r4,-8(fp)
   11d38:	e17ffd15 	stw	r5,-12(fp)
   11d3c:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   11d40:	e0bffd17 	ldw	r2,-12(fp)
   11d44:	10800a28 	cmpgeui	r2,r2,40
   11d48:	1000031e 	bne	r2,zero,11d58 <alt_up_character_lcd_set_cursor_pos+0x34>
   11d4c:	e0bffc17 	ldw	r2,-16(fp)
   11d50:	108000b0 	cmpltui	r2,r2,2
   11d54:	1000021e 	bne	r2,zero,11d60 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   11d58:	00bfffc4 	movi	r2,-1
   11d5c:	00000906 	br	11d84 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   11d60:	e17ffc17 	ldw	r5,-16(fp)
   11d64:	e13ffd17 	ldw	r4,-12(fp)
   11d68:	0011ab00 	call	11ab0 <get_DDRAM_addr>
   11d6c:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   11d70:	e0bfffc3 	ldbu	r2,-1(fp)
   11d74:	100b883a 	mov	r5,r2
   11d78:	e13ffe17 	ldw	r4,-8(fp)
   11d7c:	0011b240 	call	11b24 <alt_up_character_lcd_send_cmd>
	return 0;
   11d80:	0005883a 	mov	r2,zero
}
   11d84:	e037883a 	mov	sp,fp
   11d88:	dfc00117 	ldw	ra,4(sp)
   11d8c:	df000017 	ldw	fp,0(sp)
   11d90:	dec00204 	addi	sp,sp,8
   11d94:	f800283a 	ret

00011d98 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   11d98:	defffb04 	addi	sp,sp,-20
   11d9c:	dfc00415 	stw	ra,16(sp)
   11da0:	df000315 	stw	fp,12(sp)
   11da4:	df000304 	addi	fp,sp,12
   11da8:	e13ffe15 	stw	r4,-8(fp)
   11dac:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   11db0:	e0bffd17 	ldw	r2,-12(fp)
   11db4:	10001526 	beq	r2,zero,11e0c <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   11db8:	e0bffd17 	ldw	r2,-12(fp)
   11dbc:	0080020e 	bge	zero,r2,11dc8 <alt_up_character_lcd_shift_cursor+0x30>
   11dc0:	00800504 	movi	r2,20
   11dc4:	00000106 	br	11dcc <alt_up_character_lcd_shift_cursor+0x34>
   11dc8:	00800404 	movi	r2,16
   11dcc:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   11dd0:	e0bffd17 	ldw	r2,-12(fp)
   11dd4:	1000010e 	bge	r2,zero,11ddc <alt_up_character_lcd_shift_cursor+0x44>
   11dd8:	0085c83a 	sub	r2,zero,r2
   11ddc:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   11de0:	00000406 	br	11df4 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   11de4:	e0bfff83 	ldbu	r2,-2(fp)
   11de8:	100b883a 	mov	r5,r2
   11dec:	e13ffe17 	ldw	r4,-8(fp)
   11df0:	0011b240 	call	11b24 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   11df4:	e0bfffc3 	ldbu	r2,-1(fp)
   11df8:	10ffffc4 	addi	r3,r2,-1
   11dfc:	e0ffffc5 	stb	r3,-1(fp)
   11e00:	10803fcc 	andi	r2,r2,255
   11e04:	103ff71e 	bne	r2,zero,11de4 <alt_up_character_lcd_shift_cursor+0x4c>
   11e08:	00000106 	br	11e10 <alt_up_character_lcd_shift_cursor+0x78>
		return;
   11e0c:	0001883a 	nop
}
   11e10:	e037883a 	mov	sp,fp
   11e14:	dfc00117 	ldw	ra,4(sp)
   11e18:	df000017 	ldw	fp,0(sp)
   11e1c:	dec00204 	addi	sp,sp,8
   11e20:	f800283a 	ret

00011e24 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   11e24:	defffb04 	addi	sp,sp,-20
   11e28:	dfc00415 	stw	ra,16(sp)
   11e2c:	df000315 	stw	fp,12(sp)
   11e30:	df000304 	addi	fp,sp,12
   11e34:	e13ffe15 	stw	r4,-8(fp)
   11e38:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   11e3c:	e0bffd17 	ldw	r2,-12(fp)
   11e40:	10001526 	beq	r2,zero,11e98 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   11e44:	e0bffd17 	ldw	r2,-12(fp)
   11e48:	0080020e 	bge	zero,r2,11e54 <alt_up_character_lcd_shift_display+0x30>
   11e4c:	00800704 	movi	r2,28
   11e50:	00000106 	br	11e58 <alt_up_character_lcd_shift_display+0x34>
   11e54:	00800604 	movi	r2,24
   11e58:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   11e5c:	e0bffd17 	ldw	r2,-12(fp)
   11e60:	1000010e 	bge	r2,zero,11e68 <alt_up_character_lcd_shift_display+0x44>
   11e64:	0085c83a 	sub	r2,zero,r2
   11e68:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   11e6c:	00000406 	br	11e80 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   11e70:	e0bfff83 	ldbu	r2,-2(fp)
   11e74:	100b883a 	mov	r5,r2
   11e78:	e13ffe17 	ldw	r4,-8(fp)
   11e7c:	0011b240 	call	11b24 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   11e80:	e0bfffc3 	ldbu	r2,-1(fp)
   11e84:	10ffffc4 	addi	r3,r2,-1
   11e88:	e0ffffc5 	stb	r3,-1(fp)
   11e8c:	10803fcc 	andi	r2,r2,255
   11e90:	103ff71e 	bne	r2,zero,11e70 <alt_up_character_lcd_shift_display+0x4c>
   11e94:	00000106 	br	11e9c <alt_up_character_lcd_shift_display+0x78>
		return;
   11e98:	0001883a 	nop
}
   11e9c:	e037883a 	mov	sp,fp
   11ea0:	dfc00117 	ldw	ra,4(sp)
   11ea4:	df000017 	ldw	fp,0(sp)
   11ea8:	dec00204 	addi	sp,sp,8
   11eac:	f800283a 	ret

00011eb0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   11eb0:	defffa04 	addi	sp,sp,-24
   11eb4:	dfc00515 	stw	ra,20(sp)
   11eb8:	df000415 	stw	fp,16(sp)
   11ebc:	df000404 	addi	fp,sp,16
   11ec0:	e13ffe15 	stw	r4,-8(fp)
   11ec4:	e17ffd15 	stw	r5,-12(fp)
   11ec8:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   11ecc:	e0bffd17 	ldw	r2,-12(fp)
   11ed0:	10800a28 	cmpgeui	r2,r2,40
   11ed4:	1000031e 	bne	r2,zero,11ee4 <alt_up_character_lcd_erase_pos+0x34>
   11ed8:	e0bffc17 	ldw	r2,-16(fp)
   11edc:	108000b0 	cmpltui	r2,r2,2
   11ee0:	1000021e 	bne	r2,zero,11eec <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   11ee4:	00bfffc4 	movi	r2,-1
   11ee8:	00000f06 	br	11f28 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   11eec:	e17ffc17 	ldw	r5,-16(fp)
   11ef0:	e13ffd17 	ldw	r4,-12(fp)
   11ef4:	0011ab00 	call	11ab0 <get_DDRAM_addr>
   11ef8:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   11efc:	e0bfffc3 	ldbu	r2,-1(fp)
   11f00:	100b883a 	mov	r5,r2
   11f04:	e13ffe17 	ldw	r4,-8(fp)
   11f08:	0011b240 	call	11b24 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   11f0c:	e0bffe17 	ldw	r2,-8(fp)
   11f10:	10800a17 	ldw	r2,40(r2)
   11f14:	10800044 	addi	r2,r2,1
   11f18:	1007883a 	mov	r3,r2
   11f1c:	00800084 	movi	r2,2
   11f20:	18800025 	stbio	r2,0(r3)
	return 0;
   11f24:	0005883a 	mov	r2,zero
}
   11f28:	e037883a 	mov	sp,fp
   11f2c:	dfc00117 	ldw	ra,4(sp)
   11f30:	df000017 	ldw	fp,0(sp)
   11f34:	dec00204 	addi	sp,sp,8
   11f38:	f800283a 	ret

00011f3c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   11f3c:	defffd04 	addi	sp,sp,-12
   11f40:	dfc00215 	stw	ra,8(sp)
   11f44:	df000115 	stw	fp,4(sp)
   11f48:	df000104 	addi	fp,sp,4
   11f4c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   11f50:	01400304 	movi	r5,12
   11f54:	e13fff17 	ldw	r4,-4(fp)
   11f58:	0011b240 	call	11b24 <alt_up_character_lcd_send_cmd>
}
   11f5c:	0001883a 	nop
   11f60:	e037883a 	mov	sp,fp
   11f64:	dfc00117 	ldw	ra,4(sp)
   11f68:	df000017 	ldw	fp,0(sp)
   11f6c:	dec00204 	addi	sp,sp,8
   11f70:	f800283a 	ret

00011f74 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   11f74:	defffd04 	addi	sp,sp,-12
   11f78:	dfc00215 	stw	ra,8(sp)
   11f7c:	df000115 	stw	fp,4(sp)
   11f80:	df000104 	addi	fp,sp,4
   11f84:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   11f88:	014003c4 	movi	r5,15
   11f8c:	e13fff17 	ldw	r4,-4(fp)
   11f90:	0011b240 	call	11b24 <alt_up_character_lcd_send_cmd>
}
   11f94:	0001883a 	nop
   11f98:	e037883a 	mov	sp,fp
   11f9c:	dfc00117 	ldw	ra,4(sp)
   11fa0:	df000017 	ldw	fp,0(sp)
   11fa4:	dec00204 	addi	sp,sp,8
   11fa8:	f800283a 	ret

00011fac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11fac:	defffa04 	addi	sp,sp,-24
   11fb0:	dfc00515 	stw	ra,20(sp)
   11fb4:	df000415 	stw	fp,16(sp)
   11fb8:	df000404 	addi	fp,sp,16
   11fbc:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   11fc0:	008000c4 	movi	r2,3
   11fc4:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   11fc8:	e0fffe17 	ldw	r3,-8(fp)
   11fcc:	008003f4 	movhi	r2,15
   11fd0:	10909004 	addi	r2,r2,16960
   11fd4:	1885383a 	mul	r2,r3,r2
   11fd8:	100b883a 	mov	r5,r2
   11fdc:	0100bef4 	movhi	r4,763
   11fe0:	213c2004 	addi	r4,r4,-3968
   11fe4:	00111f40 	call	111f4 <__udivsi3>
  big_loops = us / (INT_MAX/
   11fe8:	100b883a 	mov	r5,r2
   11fec:	01200034 	movhi	r4,32768
   11ff0:	213fffc4 	addi	r4,r4,-1
   11ff4:	00111f40 	call	111f4 <__udivsi3>
   11ff8:	100b883a 	mov	r5,r2
   11ffc:	e13ffc17 	ldw	r4,-16(fp)
   12000:	00111f40 	call	111f4 <__udivsi3>
   12004:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   12008:	e0bffd17 	ldw	r2,-12(fp)
   1200c:	10002a26 	beq	r2,zero,120b8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   12010:	e03fff15 	stw	zero,-4(fp)
   12014:	00001706 	br	12074 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12018:	00a00034 	movhi	r2,32768
   1201c:	10bfffc4 	addi	r2,r2,-1
   12020:	10bfffc4 	addi	r2,r2,-1
   12024:	103ffe1e 	bne	r2,zero,12020 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   12028:	e0fffe17 	ldw	r3,-8(fp)
   1202c:	008003f4 	movhi	r2,15
   12030:	10909004 	addi	r2,r2,16960
   12034:	1885383a 	mul	r2,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12038:	100b883a 	mov	r5,r2
   1203c:	0100bef4 	movhi	r4,763
   12040:	213c2004 	addi	r4,r4,-3968
   12044:	00111f40 	call	111f4 <__udivsi3>
   12048:	100b883a 	mov	r5,r2
   1204c:	01200034 	movhi	r4,32768
   12050:	213fffc4 	addi	r4,r4,-1
   12054:	00111f40 	call	111f4 <__udivsi3>
   12058:	1007883a 	mov	r3,r2
   1205c:	e0bffc17 	ldw	r2,-16(fp)
   12060:	10c5c83a 	sub	r2,r2,r3
   12064:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   12068:	e0bfff17 	ldw	r2,-4(fp)
   1206c:	10800044 	addi	r2,r2,1
   12070:	e0bfff15 	stw	r2,-4(fp)
   12074:	e0ffff17 	ldw	r3,-4(fp)
   12078:	e0bffd17 	ldw	r2,-12(fp)
   1207c:	18bfe616 	blt	r3,r2,12018 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   12080:	e0fffe17 	ldw	r3,-8(fp)
   12084:	008003f4 	movhi	r2,15
   12088:	10909004 	addi	r2,r2,16960
   1208c:	1885383a 	mul	r2,r3,r2
   12090:	100b883a 	mov	r5,r2
   12094:	0100bef4 	movhi	r4,763
   12098:	213c2004 	addi	r4,r4,-3968
   1209c:	00111f40 	call	111f4 <__udivsi3>
   120a0:	1007883a 	mov	r3,r2
   120a4:	e0bffc17 	ldw	r2,-16(fp)
   120a8:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   120ac:	10bfffc4 	addi	r2,r2,-1
   120b0:	103ffe1e 	bne	r2,zero,120ac <alt_busy_sleep+0x100>
   120b4:	00000d06 	br	120ec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   120b8:	e0fffe17 	ldw	r3,-8(fp)
   120bc:	008003f4 	movhi	r2,15
   120c0:	10909004 	addi	r2,r2,16960
   120c4:	1885383a 	mul	r2,r3,r2
   120c8:	100b883a 	mov	r5,r2
   120cc:	0100bef4 	movhi	r4,763
   120d0:	213c2004 	addi	r4,r4,-3968
   120d4:	00111f40 	call	111f4 <__udivsi3>
   120d8:	1007883a 	mov	r3,r2
   120dc:	e0bffc17 	ldw	r2,-16(fp)
   120e0:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   120e4:	10bfffc4 	addi	r2,r2,-1
   120e8:	00bffe16 	blt	zero,r2,120e4 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   120ec:	0005883a 	mov	r2,zero
}
   120f0:	e037883a 	mov	sp,fp
   120f4:	dfc00117 	ldw	ra,4(sp)
   120f8:	df000017 	ldw	fp,0(sp)
   120fc:	dec00204 	addi	sp,sp,8
   12100:	f800283a 	ret

00012104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12104:	defffe04 	addi	sp,sp,-8
   12108:	dfc00115 	stw	ra,4(sp)
   1210c:	df000015 	stw	fp,0(sp)
   12110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12114:	d0a00717 	ldw	r2,-32740(gp)
   12118:	10000326 	beq	r2,zero,12128 <alt_get_errno+0x24>
   1211c:	d0a00717 	ldw	r2,-32740(gp)
   12120:	103ee83a 	callr	r2
   12124:	00000106 	br	1212c <alt_get_errno+0x28>
   12128:	d0a0d604 	addi	r2,gp,-31912
}
   1212c:	e037883a 	mov	sp,fp
   12130:	dfc00117 	ldw	ra,4(sp)
   12134:	df000017 	ldw	fp,0(sp)
   12138:	dec00204 	addi	sp,sp,8
   1213c:	f800283a 	ret

00012140 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12140:	defffb04 	addi	sp,sp,-20
   12144:	dfc00415 	stw	ra,16(sp)
   12148:	df000315 	stw	fp,12(sp)
   1214c:	df000304 	addi	fp,sp,12
   12150:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12154:	e0bffd17 	ldw	r2,-12(fp)
   12158:	10000616 	blt	r2,zero,12174 <close+0x34>
   1215c:	e0bffd17 	ldw	r2,-12(fp)
   12160:	10c00324 	muli	r3,r2,12
   12164:	00800074 	movhi	r2,1
   12168:	108d9d04 	addi	r2,r2,13940
   1216c:	1885883a 	add	r2,r3,r2
   12170:	00000106 	br	12178 <close+0x38>
   12174:	0005883a 	mov	r2,zero
   12178:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   1217c:	e0bfff17 	ldw	r2,-4(fp)
   12180:	10001926 	beq	r2,zero,121e8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12184:	e0bfff17 	ldw	r2,-4(fp)
   12188:	10800017 	ldw	r2,0(r2)
   1218c:	10800417 	ldw	r2,16(r2)
   12190:	10000626 	beq	r2,zero,121ac <close+0x6c>
   12194:	e0bfff17 	ldw	r2,-4(fp)
   12198:	10800017 	ldw	r2,0(r2)
   1219c:	10800417 	ldw	r2,16(r2)
   121a0:	e13fff17 	ldw	r4,-4(fp)
   121a4:	103ee83a 	callr	r2
   121a8:	00000106 	br	121b0 <close+0x70>
   121ac:	0005883a 	mov	r2,zero
   121b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   121b4:	e13ffd17 	ldw	r4,-12(fp)
   121b8:	0012a3c0 	call	12a3c <alt_release_fd>
    if (rval < 0)
   121bc:	e0bffe17 	ldw	r2,-8(fp)
   121c0:	1000070e 	bge	r2,zero,121e0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   121c4:	00121040 	call	12104 <alt_get_errno>
   121c8:	1007883a 	mov	r3,r2
   121cc:	e0bffe17 	ldw	r2,-8(fp)
   121d0:	0085c83a 	sub	r2,zero,r2
   121d4:	18800015 	stw	r2,0(r3)
      return -1;
   121d8:	00bfffc4 	movi	r2,-1
   121dc:	00000706 	br	121fc <close+0xbc>
    }
    return 0;
   121e0:	0005883a 	mov	r2,zero
   121e4:	00000506 	br	121fc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   121e8:	00121040 	call	12104 <alt_get_errno>
   121ec:	1007883a 	mov	r3,r2
   121f0:	00801444 	movi	r2,81
   121f4:	18800015 	stw	r2,0(r3)
    return -1;
   121f8:	00bfffc4 	movi	r2,-1
  }
}
   121fc:	e037883a 	mov	sp,fp
   12200:	dfc00117 	ldw	ra,4(sp)
   12204:	df000017 	ldw	fp,0(sp)
   12208:	dec00204 	addi	sp,sp,8
   1220c:	f800283a 	ret

00012210 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12210:	defffe04 	addi	sp,sp,-8
   12214:	df000115 	stw	fp,4(sp)
   12218:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1221c:	e03fff15 	stw	zero,-4(fp)
   12220:	00000506 	br	12238 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   12224:	e0bfff17 	ldw	r2,-4(fp)
   12228:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1222c:	e0bfff17 	ldw	r2,-4(fp)
   12230:	10800804 	addi	r2,r2,32
   12234:	e0bfff15 	stw	r2,-4(fp)
   12238:	e0bfff17 	ldw	r2,-4(fp)
   1223c:	10820030 	cmpltui	r2,r2,2048
   12240:	103ff81e 	bne	r2,zero,12224 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12244:	0001883a 	nop
   12248:	0001883a 	nop
   1224c:	e037883a 	mov	sp,fp
   12250:	df000017 	ldw	fp,0(sp)
   12254:	dec00104 	addi	sp,sp,4
   12258:	f800283a 	ret

0001225c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1225c:	defffc04 	addi	sp,sp,-16
   12260:	df000315 	stw	fp,12(sp)
   12264:	df000304 	addi	fp,sp,12
   12268:	e13fff15 	stw	r4,-4(fp)
   1226c:	e17ffe15 	stw	r5,-8(fp)
   12270:	e1bffd15 	stw	r6,-12(fp)
  return len;
   12274:	e0bffd17 	ldw	r2,-12(fp)
}
   12278:	e037883a 	mov	sp,fp
   1227c:	df000017 	ldw	fp,0(sp)
   12280:	dec00104 	addi	sp,sp,4
   12284:	f800283a 	ret

00012288 <alt_get_errno>:
{
   12288:	defffe04 	addi	sp,sp,-8
   1228c:	dfc00115 	stw	ra,4(sp)
   12290:	df000015 	stw	fp,0(sp)
   12294:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12298:	d0a00717 	ldw	r2,-32740(gp)
   1229c:	10000326 	beq	r2,zero,122ac <alt_get_errno+0x24>
   122a0:	d0a00717 	ldw	r2,-32740(gp)
   122a4:	103ee83a 	callr	r2
   122a8:	00000106 	br	122b0 <alt_get_errno+0x28>
   122ac:	d0a0d604 	addi	r2,gp,-31912
}
   122b0:	e037883a 	mov	sp,fp
   122b4:	dfc00117 	ldw	ra,4(sp)
   122b8:	df000017 	ldw	fp,0(sp)
   122bc:	dec00204 	addi	sp,sp,8
   122c0:	f800283a 	ret

000122c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   122c4:	defffa04 	addi	sp,sp,-24
   122c8:	dfc00515 	stw	ra,20(sp)
   122cc:	df000415 	stw	fp,16(sp)
   122d0:	df000404 	addi	fp,sp,16
   122d4:	e13ffd15 	stw	r4,-12(fp)
   122d8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   122dc:	e0bffd17 	ldw	r2,-12(fp)
   122e0:	10000326 	beq	r2,zero,122f0 <alt_dev_llist_insert+0x2c>
   122e4:	e0bffd17 	ldw	r2,-12(fp)
   122e8:	10800217 	ldw	r2,8(r2)
   122ec:	1000061e 	bne	r2,zero,12308 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   122f0:	00122880 	call	12288 <alt_get_errno>
   122f4:	1007883a 	mov	r3,r2
   122f8:	00800584 	movi	r2,22
   122fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12300:	00bffa84 	movi	r2,-22
   12304:	00001406 	br	12358 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12308:	e0bffd17 	ldw	r2,-12(fp)
   1230c:	e0fffc17 	ldw	r3,-16(fp)
   12310:	e0ffff15 	stw	r3,-4(fp)
   12314:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12318:	e0bffe17 	ldw	r2,-8(fp)
   1231c:	e0ffff17 	ldw	r3,-4(fp)
   12320:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12324:	e0bfff17 	ldw	r2,-4(fp)
   12328:	10c00017 	ldw	r3,0(r2)
   1232c:	e0bffe17 	ldw	r2,-8(fp)
   12330:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12334:	e0bfff17 	ldw	r2,-4(fp)
   12338:	10800017 	ldw	r2,0(r2)
   1233c:	e0fffe17 	ldw	r3,-8(fp)
   12340:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12344:	e0bfff17 	ldw	r2,-4(fp)
   12348:	e0fffe17 	ldw	r3,-8(fp)
   1234c:	10c00015 	stw	r3,0(r2)
}
   12350:	0001883a 	nop

  return 0;  
   12354:	0005883a 	mov	r2,zero
}
   12358:	e037883a 	mov	sp,fp
   1235c:	dfc00117 	ldw	ra,4(sp)
   12360:	df000017 	ldw	fp,0(sp)
   12364:	dec00204 	addi	sp,sp,8
   12368:	f800283a 	ret

0001236c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1236c:	defffa04 	addi	sp,sp,-24
   12370:	dfc00515 	stw	ra,20(sp)
   12374:	df000415 	stw	fp,16(sp)
   12378:	df000404 	addi	fp,sp,16
   1237c:	e13ffd15 	stw	r4,-12(fp)
   12380:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12384:	e0bffc17 	ldw	r2,-16(fp)
   12388:	10800017 	ldw	r2,0(r2)
   1238c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12390:	e13ffd17 	ldw	r4,-12(fp)
   12394:	00110e40 	call	110e4 <strlen>
   12398:	10800044 	addi	r2,r2,1
   1239c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   123a0:	00000d06 	br	123d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   123a4:	e0bfff17 	ldw	r2,-4(fp)
   123a8:	10800217 	ldw	r2,8(r2)
   123ac:	e0fffe17 	ldw	r3,-8(fp)
   123b0:	180d883a 	mov	r6,r3
   123b4:	e17ffd17 	ldw	r5,-12(fp)
   123b8:	1009883a 	mov	r4,r2
   123bc:	0012f540 	call	12f54 <memcmp>
   123c0:	1000021e 	bne	r2,zero,123cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   123c4:	e0bfff17 	ldw	r2,-4(fp)
   123c8:	00000706 	br	123e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   123cc:	e0bfff17 	ldw	r2,-4(fp)
   123d0:	10800017 	ldw	r2,0(r2)
   123d4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   123d8:	e0ffff17 	ldw	r3,-4(fp)
   123dc:	e0bffc17 	ldw	r2,-16(fp)
   123e0:	18bff01e 	bne	r3,r2,123a4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   123e4:	0005883a 	mov	r2,zero
}
   123e8:	e037883a 	mov	sp,fp
   123ec:	dfc00117 	ldw	ra,4(sp)
   123f0:	df000017 	ldw	fp,0(sp)
   123f4:	dec00204 	addi	sp,sp,8
   123f8:	f800283a 	ret

000123fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   123fc:	defffe04 	addi	sp,sp,-8
   12400:	dfc00115 	stw	ra,4(sp)
   12404:	df000015 	stw	fp,0(sp)
   12408:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1240c:	01420004 	movi	r5,2048
   12410:	0009883a 	mov	r4,zero
   12414:	0012e0c0 	call	12e0c <alt_icache_flush>
#endif
}
   12418:	0001883a 	nop
   1241c:	e037883a 	mov	sp,fp
   12420:	dfc00117 	ldw	ra,4(sp)
   12424:	df000017 	ldw	fp,0(sp)
   12428:	dec00204 	addi	sp,sp,8
   1242c:	f800283a 	ret

00012430 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12430:	defff904 	addi	sp,sp,-28
   12434:	dfc00615 	stw	ra,24(sp)
   12438:	df000515 	stw	fp,20(sp)
   1243c:	df000504 	addi	fp,sp,20
   12440:	e13fff15 	stw	r4,-4(fp)
   12444:	e17ffe15 	stw	r5,-8(fp)
   12448:	e1bffd15 	stw	r6,-12(fp)
   1244c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12450:	e0800217 	ldw	r2,8(fp)
   12454:	d8800015 	stw	r2,0(sp)
   12458:	e1fffc17 	ldw	r7,-16(fp)
   1245c:	e1bffd17 	ldw	r6,-12(fp)
   12460:	e17ffe17 	ldw	r5,-8(fp)
   12464:	e13fff17 	ldw	r4,-4(fp)
   12468:	00125e00 	call	125e0 <alt_iic_isr_register>
}  
   1246c:	e037883a 	mov	sp,fp
   12470:	dfc00117 	ldw	ra,4(sp)
   12474:	df000017 	ldw	fp,0(sp)
   12478:	dec00204 	addi	sp,sp,8
   1247c:	f800283a 	ret

00012480 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   12480:	defff904 	addi	sp,sp,-28
   12484:	df000615 	stw	fp,24(sp)
   12488:	df000604 	addi	fp,sp,24
   1248c:	e13ffb15 	stw	r4,-20(fp)
   12490:	e17ffa15 	stw	r5,-24(fp)
   12494:	e0bffa17 	ldw	r2,-24(fp)
   12498:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   1249c:	0005303a 	rdctl	r2,status
   124a0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124a4:	e0fffe17 	ldw	r3,-8(fp)
   124a8:	00bfff84 	movi	r2,-2
   124ac:	1884703a 	and	r2,r3,r2
   124b0:	1001703a 	wrctl	status,r2
  return context;
   124b4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   124b8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   124bc:	00c00044 	movi	r3,1
   124c0:	e0bfff17 	ldw	r2,-4(fp)
   124c4:	1884983a 	sll	r2,r3,r2
   124c8:	1007883a 	mov	r3,r2
   124cc:	d0a0d217 	ldw	r2,-31928(gp)
   124d0:	1884b03a 	or	r2,r3,r2
   124d4:	d0a0d215 	stw	r2,-31928(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   124d8:	d0a0d217 	ldw	r2,-31928(gp)
   124dc:	100170fa 	wrctl	ienable,r2
   124e0:	e0bffd17 	ldw	r2,-12(fp)
   124e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   124e8:	e0bffc17 	ldw	r2,-16(fp)
   124ec:	1001703a 	wrctl	status,r2
}
   124f0:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   124f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   124f8:	e037883a 	mov	sp,fp
   124fc:	df000017 	ldw	fp,0(sp)
   12500:	dec00104 	addi	sp,sp,4
   12504:	f800283a 	ret

00012508 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12508:	defff904 	addi	sp,sp,-28
   1250c:	df000615 	stw	fp,24(sp)
   12510:	df000604 	addi	fp,sp,24
   12514:	e13ffb15 	stw	r4,-20(fp)
   12518:	e17ffa15 	stw	r5,-24(fp)
   1251c:	e0bffa17 	ldw	r2,-24(fp)
   12520:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   12524:	0005303a 	rdctl	r2,status
   12528:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1252c:	e0fffe17 	ldw	r3,-8(fp)
   12530:	00bfff84 	movi	r2,-2
   12534:	1884703a 	and	r2,r3,r2
   12538:	1001703a 	wrctl	status,r2
  return context;
   1253c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   12540:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   12544:	00c00044 	movi	r3,1
   12548:	e0bfff17 	ldw	r2,-4(fp)
   1254c:	1884983a 	sll	r2,r3,r2
   12550:	0084303a 	nor	r2,zero,r2
   12554:	1007883a 	mov	r3,r2
   12558:	d0a0d217 	ldw	r2,-31928(gp)
   1255c:	1884703a 	and	r2,r3,r2
   12560:	d0a0d215 	stw	r2,-31928(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12564:	d0a0d217 	ldw	r2,-31928(gp)
   12568:	100170fa 	wrctl	ienable,r2
   1256c:	e0bffd17 	ldw	r2,-12(fp)
   12570:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   12574:	e0bffc17 	ldw	r2,-16(fp)
   12578:	1001703a 	wrctl	status,r2
}
   1257c:	0001883a 	nop
  return 0;
   12580:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   12584:	e037883a 	mov	sp,fp
   12588:	df000017 	ldw	fp,0(sp)
   1258c:	dec00104 	addi	sp,sp,4
   12590:	f800283a 	ret

00012594 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   12594:	defffc04 	addi	sp,sp,-16
   12598:	df000315 	stw	fp,12(sp)
   1259c:	df000304 	addi	fp,sp,12
   125a0:	e13ffe15 	stw	r4,-8(fp)
   125a4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   125a8:	000530fa 	rdctl	r2,ienable
   125ac:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   125b0:	00c00044 	movi	r3,1
   125b4:	e0bffd17 	ldw	r2,-12(fp)
   125b8:	1884983a 	sll	r2,r3,r2
   125bc:	1007883a 	mov	r3,r2
   125c0:	e0bfff17 	ldw	r2,-4(fp)
   125c4:	1884703a 	and	r2,r3,r2
   125c8:	1004c03a 	cmpne	r2,r2,zero
   125cc:	10803fcc 	andi	r2,r2,255
}
   125d0:	e037883a 	mov	sp,fp
   125d4:	df000017 	ldw	fp,0(sp)
   125d8:	dec00104 	addi	sp,sp,4
   125dc:	f800283a 	ret

000125e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   125e0:	defff504 	addi	sp,sp,-44
   125e4:	dfc00a15 	stw	ra,40(sp)
   125e8:	df000915 	stw	fp,36(sp)
   125ec:	df000904 	addi	fp,sp,36
   125f0:	e13ffa15 	stw	r4,-24(fp)
   125f4:	e17ff915 	stw	r5,-28(fp)
   125f8:	e1bff815 	stw	r6,-32(fp)
   125fc:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   12600:	00bffa84 	movi	r2,-22
   12604:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   12608:	e0bff917 	ldw	r2,-28(fp)
   1260c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12610:	e0bffe17 	ldw	r2,-8(fp)
   12614:	10800808 	cmpgei	r2,r2,32
   12618:	1000251e 	bne	r2,zero,126b0 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   1261c:	0005303a 	rdctl	r2,status
   12620:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12624:	e0fffc17 	ldw	r3,-16(fp)
   12628:	00bfff84 	movi	r2,-2
   1262c:	1884703a 	and	r2,r3,r2
   12630:	1001703a 	wrctl	status,r2
  return context;
   12634:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   12638:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   1263c:	e0bffe17 	ldw	r2,-8(fp)
   12640:	100890fa 	slli	r4,r2,3
   12644:	e0fff817 	ldw	r3,-32(fp)
   12648:	00800074 	movhi	r2,1
   1264c:	2085883a 	add	r2,r4,r2
   12650:	10ced415 	stw	r3,15184(r2)
    alt_irq[id].context = isr_context;
   12654:	e0bffe17 	ldw	r2,-8(fp)
   12658:	100890fa 	slli	r4,r2,3
   1265c:	e0fff717 	ldw	r3,-36(fp)
   12660:	00800074 	movhi	r2,1
   12664:	2085883a 	add	r2,r4,r2
   12668:	10ced515 	stw	r3,15188(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1266c:	e0bff817 	ldw	r2,-32(fp)
   12670:	10000526 	beq	r2,zero,12688 <alt_iic_isr_register+0xa8>
   12674:	e0bffe17 	ldw	r2,-8(fp)
   12678:	100b883a 	mov	r5,r2
   1267c:	e13ffa17 	ldw	r4,-24(fp)
   12680:	00124800 	call	12480 <alt_ic_irq_enable>
   12684:	00000406 	br	12698 <alt_iic_isr_register+0xb8>
   12688:	e0bffe17 	ldw	r2,-8(fp)
   1268c:	100b883a 	mov	r5,r2
   12690:	e13ffa17 	ldw	r4,-24(fp)
   12694:	00125080 	call	12508 <alt_ic_irq_disable>
   12698:	e0bfff15 	stw	r2,-4(fp)
   1269c:	e0bffd17 	ldw	r2,-12(fp)
   126a0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   126a4:	e0bffb17 	ldw	r2,-20(fp)
   126a8:	1001703a 	wrctl	status,r2
}
   126ac:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   126b0:	e0bfff17 	ldw	r2,-4(fp)
}
   126b4:	e037883a 	mov	sp,fp
   126b8:	dfc00117 	ldw	ra,4(sp)
   126bc:	df000017 	ldw	fp,0(sp)
   126c0:	dec00204 	addi	sp,sp,8
   126c4:	f800283a 	ret

000126c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   126c8:	defff904 	addi	sp,sp,-28
   126cc:	dfc00615 	stw	ra,24(sp)
   126d0:	df000515 	stw	fp,20(sp)
   126d4:	df000504 	addi	fp,sp,20
   126d8:	e13ffe15 	stw	r4,-8(fp)
   126dc:	e17ffd15 	stw	r5,-12(fp)
   126e0:	e1bffc15 	stw	r6,-16(fp)
   126e4:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   126e8:	e1bffb17 	ldw	r6,-20(fp)
   126ec:	e17ffc17 	ldw	r5,-16(fp)
   126f0:	e13ffd17 	ldw	r4,-12(fp)
   126f4:	00128e80 	call	128e8 <open>
   126f8:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   126fc:	e0bfff17 	ldw	r2,-4(fp)
   12700:	10001716 	blt	r2,zero,12760 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   12704:	e0bfff17 	ldw	r2,-4(fp)
   12708:	10c00324 	muli	r3,r2,12
   1270c:	00800074 	movhi	r2,1
   12710:	1885883a 	add	r2,r3,r2
   12714:	10cd9d17 	ldw	r3,13940(r2)
   12718:	e0bffe17 	ldw	r2,-8(fp)
   1271c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12720:	e0bfff17 	ldw	r2,-4(fp)
   12724:	10c00324 	muli	r3,r2,12
   12728:	00800074 	movhi	r2,1
   1272c:	1885883a 	add	r2,r3,r2
   12730:	10cd9e17 	ldw	r3,13944(r2)
   12734:	e0bffe17 	ldw	r2,-8(fp)
   12738:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1273c:	e0bfff17 	ldw	r2,-4(fp)
   12740:	10c00324 	muli	r3,r2,12
   12744:	00800074 	movhi	r2,1
   12748:	1885883a 	add	r2,r3,r2
   1274c:	10cd9f17 	ldw	r3,13948(r2)
   12750:	e0bffe17 	ldw	r2,-8(fp)
   12754:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12758:	e13fff17 	ldw	r4,-4(fp)
   1275c:	0012a3c0 	call	12a3c <alt_release_fd>
  }
} 
   12760:	0001883a 	nop
   12764:	e037883a 	mov	sp,fp
   12768:	dfc00117 	ldw	ra,4(sp)
   1276c:	df000017 	ldw	fp,0(sp)
   12770:	dec00204 	addi	sp,sp,8
   12774:	f800283a 	ret

00012778 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12778:	defffb04 	addi	sp,sp,-20
   1277c:	dfc00415 	stw	ra,16(sp)
   12780:	df000315 	stw	fp,12(sp)
   12784:	df000304 	addi	fp,sp,12
   12788:	e13fff15 	stw	r4,-4(fp)
   1278c:	e17ffe15 	stw	r5,-8(fp)
   12790:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12794:	01c07fc4 	movi	r7,511
   12798:	01800044 	movi	r6,1
   1279c:	e17fff17 	ldw	r5,-4(fp)
   127a0:	01000074 	movhi	r4,1
   127a4:	210da004 	addi	r4,r4,13952
   127a8:	00126c80 	call	126c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   127ac:	01c07fc4 	movi	r7,511
   127b0:	000d883a 	mov	r6,zero
   127b4:	e17ffe17 	ldw	r5,-8(fp)
   127b8:	01000074 	movhi	r4,1
   127bc:	210d9d04 	addi	r4,r4,13940
   127c0:	00126c80 	call	126c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   127c4:	01c07fc4 	movi	r7,511
   127c8:	01800044 	movi	r6,1
   127cc:	e17ffd17 	ldw	r5,-12(fp)
   127d0:	01000074 	movhi	r4,1
   127d4:	210da304 	addi	r4,r4,13964
   127d8:	00126c80 	call	126c8 <alt_open_fd>
}  
   127dc:	0001883a 	nop
   127e0:	e037883a 	mov	sp,fp
   127e4:	dfc00117 	ldw	ra,4(sp)
   127e8:	df000017 	ldw	fp,0(sp)
   127ec:	dec00204 	addi	sp,sp,8
   127f0:	f800283a 	ret

000127f4 <alt_get_errno>:
{
   127f4:	defffe04 	addi	sp,sp,-8
   127f8:	dfc00115 	stw	ra,4(sp)
   127fc:	df000015 	stw	fp,0(sp)
   12800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12804:	d0a00717 	ldw	r2,-32740(gp)
   12808:	10000326 	beq	r2,zero,12818 <alt_get_errno+0x24>
   1280c:	d0a00717 	ldw	r2,-32740(gp)
   12810:	103ee83a 	callr	r2
   12814:	00000106 	br	1281c <alt_get_errno+0x28>
   12818:	d0a0d604 	addi	r2,gp,-31912
}
   1281c:	e037883a 	mov	sp,fp
   12820:	dfc00117 	ldw	ra,4(sp)
   12824:	df000017 	ldw	fp,0(sp)
   12828:	dec00204 	addi	sp,sp,8
   1282c:	f800283a 	ret

00012830 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12830:	defffd04 	addi	sp,sp,-12
   12834:	df000215 	stw	fp,8(sp)
   12838:	df000204 	addi	fp,sp,8
   1283c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12840:	e0bffe17 	ldw	r2,-8(fp)
   12844:	10800217 	ldw	r2,8(r2)
   12848:	10d00034 	orhi	r3,r2,16384
   1284c:	e0bffe17 	ldw	r2,-8(fp)
   12850:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12854:	e03fff15 	stw	zero,-4(fp)
   12858:	00001a06 	br	128c4 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1285c:	e0bfff17 	ldw	r2,-4(fp)
   12860:	10c00324 	muli	r3,r2,12
   12864:	00800074 	movhi	r2,1
   12868:	1885883a 	add	r2,r3,r2
   1286c:	10cd9d17 	ldw	r3,13940(r2)
   12870:	e0bffe17 	ldw	r2,-8(fp)
   12874:	10800017 	ldw	r2,0(r2)
   12878:	18800f1e 	bne	r3,r2,128b8 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1287c:	e0bfff17 	ldw	r2,-4(fp)
   12880:	10c00324 	muli	r3,r2,12
   12884:	00800074 	movhi	r2,1
   12888:	1885883a 	add	r2,r3,r2
   1288c:	108d9f17 	ldw	r2,13948(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   12890:	1000090e 	bge	r2,zero,128b8 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   12894:	e0bfff17 	ldw	r2,-4(fp)
   12898:	10c00324 	muli	r3,r2,12
   1289c:	00800074 	movhi	r2,1
   128a0:	108d9d04 	addi	r2,r2,13940
   128a4:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   128a8:	e0fffe17 	ldw	r3,-8(fp)
   128ac:	18800226 	beq	r3,r2,128b8 <alt_file_locked+0x88>
    {
      return -EACCES;
   128b0:	00bffcc4 	movi	r2,-13
   128b4:	00000806 	br	128d8 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   128b8:	e0bfff17 	ldw	r2,-4(fp)
   128bc:	10800044 	addi	r2,r2,1
   128c0:	e0bfff15 	stw	r2,-4(fp)
   128c4:	d0a00617 	ldw	r2,-32744(gp)
   128c8:	1007883a 	mov	r3,r2
   128cc:	e0bfff17 	ldw	r2,-4(fp)
   128d0:	18bfe22e 	bgeu	r3,r2,1285c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   128d4:	0005883a 	mov	r2,zero
}
   128d8:	e037883a 	mov	sp,fp
   128dc:	df000017 	ldw	fp,0(sp)
   128e0:	dec00104 	addi	sp,sp,4
   128e4:	f800283a 	ret

000128e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   128e8:	defff604 	addi	sp,sp,-40
   128ec:	dfc00915 	stw	ra,36(sp)
   128f0:	df000815 	stw	fp,32(sp)
   128f4:	df000804 	addi	fp,sp,32
   128f8:	e13ffa15 	stw	r4,-24(fp)
   128fc:	e17ff915 	stw	r5,-28(fp)
   12900:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12904:	00bfffc4 	movi	r2,-1
   12908:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   1290c:	00bffb44 	movi	r2,-19
   12910:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   12914:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12918:	d1600404 	addi	r5,gp,-32752
   1291c:	e13ffa17 	ldw	r4,-24(fp)
   12920:	001236c0 	call	1236c <alt_find_dev>
   12924:	e0bfff15 	stw	r2,-4(fp)
   12928:	e0bfff17 	ldw	r2,-4(fp)
   1292c:	1000051e 	bne	r2,zero,12944 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12930:	e13ffa17 	ldw	r4,-24(fp)
   12934:	0012c640 	call	12c64 <alt_find_file>
   12938:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   1293c:	00800044 	movi	r2,1
   12940:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12944:	e0bfff17 	ldw	r2,-4(fp)
   12948:	10002926 	beq	r2,zero,129f0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1294c:	e13fff17 	ldw	r4,-4(fp)
   12950:	0012d6c0 	call	12d6c <alt_get_fd>
   12954:	e0bffe15 	stw	r2,-8(fp)
   12958:	e0bffe17 	ldw	r2,-8(fp)
   1295c:	1000030e 	bge	r2,zero,1296c <open+0x84>
    {
      status = index;
   12960:	e0bffe17 	ldw	r2,-8(fp)
   12964:	e0bffd15 	stw	r2,-12(fp)
   12968:	00002306 	br	129f8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1296c:	e0bffe17 	ldw	r2,-8(fp)
   12970:	10c00324 	muli	r3,r2,12
   12974:	00800074 	movhi	r2,1
   12978:	108d9d04 	addi	r2,r2,13940
   1297c:	1885883a 	add	r2,r3,r2
   12980:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12984:	e0fff917 	ldw	r3,-28(fp)
   12988:	00900034 	movhi	r2,16384
   1298c:	10bfffc4 	addi	r2,r2,-1
   12990:	1886703a 	and	r3,r3,r2
   12994:	e0bffb17 	ldw	r2,-20(fp)
   12998:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1299c:	e0bffc17 	ldw	r2,-16(fp)
   129a0:	1000051e 	bne	r2,zero,129b8 <open+0xd0>
   129a4:	e13ffb17 	ldw	r4,-20(fp)
   129a8:	00128300 	call	12830 <alt_file_locked>
   129ac:	e0bffd15 	stw	r2,-12(fp)
   129b0:	e0bffd17 	ldw	r2,-12(fp)
   129b4:	10001016 	blt	r2,zero,129f8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   129b8:	e0bfff17 	ldw	r2,-4(fp)
   129bc:	10800317 	ldw	r2,12(r2)
   129c0:	10000826 	beq	r2,zero,129e4 <open+0xfc>
   129c4:	e0bfff17 	ldw	r2,-4(fp)
   129c8:	10800317 	ldw	r2,12(r2)
   129cc:	e1fff817 	ldw	r7,-32(fp)
   129d0:	e1bff917 	ldw	r6,-28(fp)
   129d4:	e17ffa17 	ldw	r5,-24(fp)
   129d8:	e13ffb17 	ldw	r4,-20(fp)
   129dc:	103ee83a 	callr	r2
   129e0:	00000106 	br	129e8 <open+0x100>
   129e4:	0005883a 	mov	r2,zero
   129e8:	e0bffd15 	stw	r2,-12(fp)
   129ec:	00000206 	br	129f8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   129f0:	00bffb44 	movi	r2,-19
   129f4:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   129f8:	e0bffd17 	ldw	r2,-12(fp)
   129fc:	1000090e 	bge	r2,zero,12a24 <open+0x13c>
  {
    alt_release_fd (index);  
   12a00:	e13ffe17 	ldw	r4,-8(fp)
   12a04:	0012a3c0 	call	12a3c <alt_release_fd>
    ALT_ERRNO = -status;
   12a08:	00127f40 	call	127f4 <alt_get_errno>
   12a0c:	1007883a 	mov	r3,r2
   12a10:	e0bffd17 	ldw	r2,-12(fp)
   12a14:	0085c83a 	sub	r2,zero,r2
   12a18:	18800015 	stw	r2,0(r3)
    return -1;
   12a1c:	00bfffc4 	movi	r2,-1
   12a20:	00000106 	br	12a28 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   12a24:	e0bffe17 	ldw	r2,-8(fp)
}
   12a28:	e037883a 	mov	sp,fp
   12a2c:	dfc00117 	ldw	ra,4(sp)
   12a30:	df000017 	ldw	fp,0(sp)
   12a34:	dec00204 	addi	sp,sp,8
   12a38:	f800283a 	ret

00012a3c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12a3c:	defffe04 	addi	sp,sp,-8
   12a40:	df000115 	stw	fp,4(sp)
   12a44:	df000104 	addi	fp,sp,4
   12a48:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12a4c:	e0bfff17 	ldw	r2,-4(fp)
   12a50:	108000d0 	cmplti	r2,r2,3
   12a54:	10000a1e 	bne	r2,zero,12a80 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   12a58:	e0bfff17 	ldw	r2,-4(fp)
   12a5c:	10c00324 	muli	r3,r2,12
   12a60:	00800074 	movhi	r2,1
   12a64:	1885883a 	add	r2,r3,r2
   12a68:	100d9f15 	stw	zero,13948(r2)
    alt_fd_list[fd].dev      = 0;
   12a6c:	e0bfff17 	ldw	r2,-4(fp)
   12a70:	10c00324 	muli	r3,r2,12
   12a74:	00800074 	movhi	r2,1
   12a78:	1885883a 	add	r2,r3,r2
   12a7c:	100d9d15 	stw	zero,13940(r2)
  }
}
   12a80:	0001883a 	nop
   12a84:	e037883a 	mov	sp,fp
   12a88:	df000017 	ldw	fp,0(sp)
   12a8c:	dec00104 	addi	sp,sp,4
   12a90:	f800283a 	ret

00012a94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12a94:	defffa04 	addi	sp,sp,-24
   12a98:	df000515 	stw	fp,20(sp)
   12a9c:	df000504 	addi	fp,sp,20
   12aa0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   12aa4:	0005303a 	rdctl	r2,status
   12aa8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12aac:	e0fffc17 	ldw	r3,-16(fp)
   12ab0:	00bfff84 	movi	r2,-2
   12ab4:	1884703a 	and	r2,r3,r2
   12ab8:	1001703a 	wrctl	status,r2
  return context;
   12abc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12ac0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   12ac4:	e0bffb17 	ldw	r2,-20(fp)
   12ac8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12acc:	e0bffd17 	ldw	r2,-12(fp)
   12ad0:	10800017 	ldw	r2,0(r2)
   12ad4:	e0fffd17 	ldw	r3,-12(fp)
   12ad8:	18c00117 	ldw	r3,4(r3)
   12adc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12ae0:	e0bffd17 	ldw	r2,-12(fp)
   12ae4:	10800117 	ldw	r2,4(r2)
   12ae8:	e0fffd17 	ldw	r3,-12(fp)
   12aec:	18c00017 	ldw	r3,0(r3)
   12af0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12af4:	e0bffd17 	ldw	r2,-12(fp)
   12af8:	e0fffd17 	ldw	r3,-12(fp)
   12afc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12b00:	e0bffd17 	ldw	r2,-12(fp)
   12b04:	e0fffd17 	ldw	r3,-12(fp)
   12b08:	10c00015 	stw	r3,0(r2)
} 
   12b0c:	0001883a 	nop
   12b10:	e0bfff17 	ldw	r2,-4(fp)
   12b14:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   12b18:	e0bffe17 	ldw	r2,-8(fp)
   12b1c:	1001703a 	wrctl	status,r2
}
   12b20:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   12b24:	0001883a 	nop
   12b28:	e037883a 	mov	sp,fp
   12b2c:	df000017 	ldw	fp,0(sp)
   12b30:	dec00104 	addi	sp,sp,4
   12b34:	f800283a 	ret

00012b38 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12b38:	defffb04 	addi	sp,sp,-20
   12b3c:	dfc00415 	stw	ra,16(sp)
   12b40:	df000315 	stw	fp,12(sp)
   12b44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12b48:	d0a00917 	ldw	r2,-32732(gp)
   12b4c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12b50:	d0a0d417 	ldw	r2,-31920(gp)
   12b54:	10800044 	addi	r2,r2,1
   12b58:	d0a0d415 	stw	r2,-31920(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12b5c:	00002e06 	br	12c18 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12b60:	e0bfff17 	ldw	r2,-4(fp)
   12b64:	10800017 	ldw	r2,0(r2)
   12b68:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12b6c:	e0bfff17 	ldw	r2,-4(fp)
   12b70:	10800403 	ldbu	r2,16(r2)
   12b74:	10803fcc 	andi	r2,r2,255
   12b78:	10000426 	beq	r2,zero,12b8c <alt_tick+0x54>
   12b7c:	d0a0d417 	ldw	r2,-31920(gp)
   12b80:	1000021e 	bne	r2,zero,12b8c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12b84:	e0bfff17 	ldw	r2,-4(fp)
   12b88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12b8c:	e0bfff17 	ldw	r2,-4(fp)
   12b90:	10800217 	ldw	r2,8(r2)
   12b94:	d0e0d417 	ldw	r3,-31920(gp)
   12b98:	18801d36 	bltu	r3,r2,12c10 <alt_tick+0xd8>
   12b9c:	e0bfff17 	ldw	r2,-4(fp)
   12ba0:	10800403 	ldbu	r2,16(r2)
   12ba4:	10803fcc 	andi	r2,r2,255
   12ba8:	1000191e 	bne	r2,zero,12c10 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12bac:	e0bfff17 	ldw	r2,-4(fp)
   12bb0:	10800317 	ldw	r2,12(r2)
   12bb4:	e0ffff17 	ldw	r3,-4(fp)
   12bb8:	18c00517 	ldw	r3,20(r3)
   12bbc:	1809883a 	mov	r4,r3
   12bc0:	103ee83a 	callr	r2
   12bc4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12bc8:	e0bffd17 	ldw	r2,-12(fp)
   12bcc:	1000031e 	bne	r2,zero,12bdc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   12bd0:	e13fff17 	ldw	r4,-4(fp)
   12bd4:	0012a940 	call	12a94 <alt_alarm_stop>
   12bd8:	00000d06 	br	12c10 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   12bdc:	e0bfff17 	ldw	r2,-4(fp)
   12be0:	10c00217 	ldw	r3,8(r2)
   12be4:	e0bffd17 	ldw	r2,-12(fp)
   12be8:	1887883a 	add	r3,r3,r2
   12bec:	e0bfff17 	ldw	r2,-4(fp)
   12bf0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12bf4:	e0bfff17 	ldw	r2,-4(fp)
   12bf8:	10c00217 	ldw	r3,8(r2)
   12bfc:	d0a0d417 	ldw	r2,-31920(gp)
   12c00:	1880032e 	bgeu	r3,r2,12c10 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12c04:	e0bfff17 	ldw	r2,-4(fp)
   12c08:	00c00044 	movi	r3,1
   12c0c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12c10:	e0bffe17 	ldw	r2,-8(fp)
   12c14:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   12c18:	e0ffff17 	ldw	r3,-4(fp)
   12c1c:	d0a00904 	addi	r2,gp,-32732
   12c20:	18bfcf1e 	bne	r3,r2,12b60 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12c24:	0001883a 	nop
}
   12c28:	0001883a 	nop
   12c2c:	e037883a 	mov	sp,fp
   12c30:	dfc00117 	ldw	ra,4(sp)
   12c34:	df000017 	ldw	fp,0(sp)
   12c38:	dec00204 	addi	sp,sp,8
   12c3c:	f800283a 	ret

00012c40 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12c40:	deffff04 	addi	sp,sp,-4
   12c44:	df000015 	stw	fp,0(sp)
   12c48:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12c4c:	000170fa 	wrctl	ienable,zero
}
   12c50:	0001883a 	nop
   12c54:	e037883a 	mov	sp,fp
   12c58:	df000017 	ldw	fp,0(sp)
   12c5c:	dec00104 	addi	sp,sp,4
   12c60:	f800283a 	ret

00012c64 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12c64:	defffb04 	addi	sp,sp,-20
   12c68:	dfc00415 	stw	ra,16(sp)
   12c6c:	df000315 	stw	fp,12(sp)
   12c70:	df000304 	addi	fp,sp,12
   12c74:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12c78:	d0a00217 	ldw	r2,-32760(gp)
   12c7c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12c80:	00003106 	br	12d48 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12c84:	e0bfff17 	ldw	r2,-4(fp)
   12c88:	10800217 	ldw	r2,8(r2)
   12c8c:	1009883a 	mov	r4,r2
   12c90:	00110e40 	call	110e4 <strlen>
   12c94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12c98:	e0bfff17 	ldw	r2,-4(fp)
   12c9c:	10c00217 	ldw	r3,8(r2)
   12ca0:	e0bffe17 	ldw	r2,-8(fp)
   12ca4:	10bfffc4 	addi	r2,r2,-1
   12ca8:	1885883a 	add	r2,r3,r2
   12cac:	10800003 	ldbu	r2,0(r2)
   12cb0:	10803fcc 	andi	r2,r2,255
   12cb4:	1080201c 	xori	r2,r2,128
   12cb8:	10bfe004 	addi	r2,r2,-128
   12cbc:	10800bd8 	cmpnei	r2,r2,47
   12cc0:	1000031e 	bne	r2,zero,12cd0 <alt_find_file+0x6c>
    {
      len -= 1;
   12cc4:	e0bffe17 	ldw	r2,-8(fp)
   12cc8:	10bfffc4 	addi	r2,r2,-1
   12ccc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12cd0:	e0bffe17 	ldw	r2,-8(fp)
   12cd4:	e0fffd17 	ldw	r3,-12(fp)
   12cd8:	1885883a 	add	r2,r3,r2
   12cdc:	10800003 	ldbu	r2,0(r2)
   12ce0:	10803fcc 	andi	r2,r2,255
   12ce4:	1080201c 	xori	r2,r2,128
   12ce8:	10bfe004 	addi	r2,r2,-128
   12cec:	10800be0 	cmpeqi	r2,r2,47
   12cf0:	1000081e 	bne	r2,zero,12d14 <alt_find_file+0xb0>
   12cf4:	e0bffe17 	ldw	r2,-8(fp)
   12cf8:	e0fffd17 	ldw	r3,-12(fp)
   12cfc:	1885883a 	add	r2,r3,r2
   12d00:	10800003 	ldbu	r2,0(r2)
   12d04:	10803fcc 	andi	r2,r2,255
   12d08:	1080201c 	xori	r2,r2,128
   12d0c:	10bfe004 	addi	r2,r2,-128
   12d10:	10000a1e 	bne	r2,zero,12d3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12d14:	e0bfff17 	ldw	r2,-4(fp)
   12d18:	10800217 	ldw	r2,8(r2)
   12d1c:	e0fffe17 	ldw	r3,-8(fp)
   12d20:	180d883a 	mov	r6,r3
   12d24:	e17ffd17 	ldw	r5,-12(fp)
   12d28:	1009883a 	mov	r4,r2
   12d2c:	0012f540 	call	12f54 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   12d30:	1000021e 	bne	r2,zero,12d3c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   12d34:	e0bfff17 	ldw	r2,-4(fp)
   12d38:	00000706 	br	12d58 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12d3c:	e0bfff17 	ldw	r2,-4(fp)
   12d40:	10800017 	ldw	r2,0(r2)
   12d44:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   12d48:	e0ffff17 	ldw	r3,-4(fp)
   12d4c:	d0a00204 	addi	r2,gp,-32760
   12d50:	18bfcc1e 	bne	r3,r2,12c84 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   12d54:	0005883a 	mov	r2,zero
}
   12d58:	e037883a 	mov	sp,fp
   12d5c:	dfc00117 	ldw	ra,4(sp)
   12d60:	df000017 	ldw	fp,0(sp)
   12d64:	dec00204 	addi	sp,sp,8
   12d68:	f800283a 	ret

00012d6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12d6c:	defffc04 	addi	sp,sp,-16
   12d70:	df000315 	stw	fp,12(sp)
   12d74:	df000304 	addi	fp,sp,12
   12d78:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   12d7c:	00bffa04 	movi	r2,-24
   12d80:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12d84:	e03fff15 	stw	zero,-4(fp)
   12d88:	00001706 	br	12de8 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   12d8c:	e0bfff17 	ldw	r2,-4(fp)
   12d90:	10c00324 	muli	r3,r2,12
   12d94:	00800074 	movhi	r2,1
   12d98:	1885883a 	add	r2,r3,r2
   12d9c:	108d9d17 	ldw	r2,13940(r2)
   12da0:	10000e1e 	bne	r2,zero,12ddc <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	11000324 	muli	r4,r2,12
   12dac:	e0fffd17 	ldw	r3,-12(fp)
   12db0:	00800074 	movhi	r2,1
   12db4:	2085883a 	add	r2,r4,r2
   12db8:	10cd9d15 	stw	r3,13940(r2)
      if (i > alt_max_fd)
   12dbc:	d0e00617 	ldw	r3,-32744(gp)
   12dc0:	e0bfff17 	ldw	r2,-4(fp)
   12dc4:	1880020e 	bge	r3,r2,12dd0 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   12dc8:	e0bfff17 	ldw	r2,-4(fp)
   12dcc:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   12dd0:	e0bfff17 	ldw	r2,-4(fp)
   12dd4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   12dd8:	00000706 	br	12df8 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   12ddc:	e0bfff17 	ldw	r2,-4(fp)
   12de0:	10800044 	addi	r2,r2,1
   12de4:	e0bfff15 	stw	r2,-4(fp)
   12de8:	e0bfff17 	ldw	r2,-4(fp)
   12dec:	10800810 	cmplti	r2,r2,32
   12df0:	103fe61e 	bne	r2,zero,12d8c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   12df4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12df8:	e0bffe17 	ldw	r2,-8(fp)
}
   12dfc:	e037883a 	mov	sp,fp
   12e00:	df000017 	ldw	fp,0(sp)
   12e04:	dec00104 	addi	sp,sp,4
   12e08:	f800283a 	ret

00012e0c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12e0c:	defffb04 	addi	sp,sp,-20
   12e10:	df000415 	stw	fp,16(sp)
   12e14:	df000404 	addi	fp,sp,16
   12e18:	e13ffd15 	stw	r4,-12(fp)
   12e1c:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   12e20:	e0bffc17 	ldw	r2,-16(fp)
   12e24:	10820070 	cmpltui	r2,r2,2049
   12e28:	1000021e 	bne	r2,zero,12e34 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   12e2c:	00820004 	movi	r2,2048
   12e30:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   12e34:	e0fffd17 	ldw	r3,-12(fp)
   12e38:	e0bffc17 	ldw	r2,-16(fp)
   12e3c:	1885883a 	add	r2,r3,r2
   12e40:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12e44:	e0bffd17 	ldw	r2,-12(fp)
   12e48:	e0bfff15 	stw	r2,-4(fp)
   12e4c:	00000506 	br	12e64 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12e50:	e0bfff17 	ldw	r2,-4(fp)
   12e54:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12e58:	e0bfff17 	ldw	r2,-4(fp)
   12e5c:	10800804 	addi	r2,r2,32
   12e60:	e0bfff15 	stw	r2,-4(fp)
   12e64:	e0ffff17 	ldw	r3,-4(fp)
   12e68:	e0bffe17 	ldw	r2,-8(fp)
   12e6c:	18bff836 	bltu	r3,r2,12e50 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12e70:	e0bffd17 	ldw	r2,-12(fp)
   12e74:	108007cc 	andi	r2,r2,31
   12e78:	10000226 	beq	r2,zero,12e84 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12e7c:	e0bfff17 	ldw	r2,-4(fp)
   12e80:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12e84:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   12e88:	0001883a 	nop
   12e8c:	e037883a 	mov	sp,fp
   12e90:	df000017 	ldw	fp,0(sp)
   12e94:	dec00104 	addi	sp,sp,4
   12e98:	f800283a 	ret

00012e9c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12e9c:	defffe04 	addi	sp,sp,-8
   12ea0:	df000115 	stw	fp,4(sp)
   12ea4:	df000104 	addi	fp,sp,4
   12ea8:	e13fff15 	stw	r4,-4(fp)
   12eac:	e0bfff17 	ldw	r2,-4(fp)
   12eb0:	10bffe84 	addi	r2,r2,-6
   12eb4:	10c00428 	cmpgeui	r3,r2,16
   12eb8:	1800191e 	bne	r3,zero,12f20 <alt_exception_cause_generated_bad_addr+0x84>
   12ebc:	100690ba 	slli	r3,r2,2
   12ec0:	00800074 	movhi	r2,1
   12ec4:	1885883a 	add	r2,r3,r2
   12ec8:	108bb417 	ldw	r2,11984(r2)
   12ecc:	1000683a 	jmp	r2
   12ed0:	00012f10 	cmplti	zero,zero,1212
   12ed4:	00012f10 	cmplti	zero,zero,1212
   12ed8:	00012f20 	cmpeqi	zero,zero,1212
   12edc:	00012f20 	cmpeqi	zero,zero,1212
   12ee0:	00012f20 	cmpeqi	zero,zero,1212
   12ee4:	00012f10 	cmplti	zero,zero,1212
   12ee8:	00012f18 	cmpnei	zero,zero,1212
   12eec:	00012f20 	cmpeqi	zero,zero,1212
   12ef0:	00012f10 	cmplti	zero,zero,1212
   12ef4:	00012f10 	cmplti	zero,zero,1212
   12ef8:	00012f20 	cmpeqi	zero,zero,1212
   12efc:	00012f10 	cmplti	zero,zero,1212
   12f00:	00012f18 	cmpnei	zero,zero,1212
   12f04:	00012f20 	cmpeqi	zero,zero,1212
   12f08:	00012f20 	cmpeqi	zero,zero,1212
   12f0c:	00012f10 	cmplti	zero,zero,1212
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12f10:	00800044 	movi	r2,1
   12f14:	00000306 	br	12f24 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12f18:	0005883a 	mov	r2,zero
   12f1c:	00000106 	br	12f24 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   12f20:	0005883a 	mov	r2,zero
  }
}
   12f24:	e037883a 	mov	sp,fp
   12f28:	df000017 	ldw	fp,0(sp)
   12f2c:	dec00104 	addi	sp,sp,4
   12f30:	f800283a 	ret

00012f34 <exit>:
   12f34:	defffe04 	addi	sp,sp,-8
   12f38:	000b883a 	mov	r5,zero
   12f3c:	dc000015 	stw	r16,0(sp)
   12f40:	dfc00115 	stw	ra,4(sp)
   12f44:	2021883a 	mov	r16,r4
   12f48:	0012fa40 	call	12fa4 <__call_exitprocs>
   12f4c:	8009883a 	mov	r4,r16
   12f50:	001326c0 	call	1326c <_exit>

00012f54 <memcmp>:
   12f54:	0007883a 	mov	r3,zero
   12f58:	30c0021e 	bne	r6,r3,12f64 <memcmp+0x10>
   12f5c:	0005883a 	mov	r2,zero
   12f60:	f800283a 	ret
   12f64:	20c5883a 	add	r2,r4,r3
   12f68:	18c00044 	addi	r3,r3,1
   12f6c:	28cf883a 	add	r7,r5,r3
   12f70:	10800003 	ldbu	r2,0(r2)
   12f74:	39ffffc3 	ldbu	r7,-1(r7)
   12f78:	11fff726 	beq	r2,r7,12f58 <memcmp+0x4>
   12f7c:	11c5c83a 	sub	r2,r2,r7
   12f80:	f800283a 	ret

00012f84 <_putchar_r>:
   12f84:	21800217 	ldw	r6,8(r4)
   12f88:	00131201 	jmpi	13120 <_putc_r>

00012f8c <putchar>:
   12f8c:	00800074 	movhi	r2,1
   12f90:	108dfe17 	ldw	r2,14328(r2)
   12f94:	200b883a 	mov	r5,r4
   12f98:	11800217 	ldw	r6,8(r2)
   12f9c:	1009883a 	mov	r4,r2
   12fa0:	00131201 	jmpi	13120 <_putc_r>

00012fa4 <__call_exitprocs>:
   12fa4:	defff604 	addi	sp,sp,-40
   12fa8:	00800074 	movhi	r2,1
   12fac:	dd800615 	stw	r22,24(sp)
   12fb0:	158dfd17 	ldw	r22,14324(r2)
   12fb4:	dd400515 	stw	r21,20(sp)
   12fb8:	dd000415 	stw	r20,16(sp)
   12fbc:	dfc00915 	stw	ra,36(sp)
   12fc0:	df000815 	stw	fp,32(sp)
   12fc4:	ddc00715 	stw	r23,28(sp)
   12fc8:	dcc00315 	stw	r19,12(sp)
   12fcc:	dc800215 	stw	r18,8(sp)
   12fd0:	dc400115 	stw	r17,4(sp)
   12fd4:	dc000015 	stw	r16,0(sp)
   12fd8:	202b883a 	mov	r21,r4
   12fdc:	2829883a 	mov	r20,r5
   12fe0:	b4400d17 	ldw	r17,52(r22)
   12fe4:	88000726 	beq	r17,zero,13004 <__call_exitprocs+0x60>
   12fe8:	8c000117 	ldw	r16,4(r17)
   12fec:	8cc02217 	ldw	r19,136(r17)
   12ff0:	84bfffc4 	addi	r18,r16,-1
   12ff4:	802090ba 	slli	r16,r16,2
   12ff8:	9c2f883a 	add	r23,r19,r16
   12ffc:	8c21883a 	add	r16,r17,r16
   13000:	90000c0e 	bge	r18,zero,13034 <__call_exitprocs+0x90>
   13004:	dfc00917 	ldw	ra,36(sp)
   13008:	df000817 	ldw	fp,32(sp)
   1300c:	ddc00717 	ldw	r23,28(sp)
   13010:	dd800617 	ldw	r22,24(sp)
   13014:	dd400517 	ldw	r21,20(sp)
   13018:	dd000417 	ldw	r20,16(sp)
   1301c:	dcc00317 	ldw	r19,12(sp)
   13020:	dc800217 	ldw	r18,8(sp)
   13024:	dc400117 	ldw	r17,4(sp)
   13028:	dc000017 	ldw	r16,0(sp)
   1302c:	dec00a04 	addi	sp,sp,40
   13030:	f800283a 	ret
   13034:	a0000726 	beq	r20,zero,13054 <__call_exitprocs+0xb0>
   13038:	9800041e 	bne	r19,zero,1304c <__call_exitprocs+0xa8>
   1303c:	94bfffc4 	addi	r18,r18,-1
   13040:	bdffff04 	addi	r23,r23,-4
   13044:	843fff04 	addi	r16,r16,-4
   13048:	003fed06 	br	13000 <__call_exitprocs+0x5c>
   1304c:	b8c01f17 	ldw	r3,124(r23)
   13050:	1d3ffa1e 	bne	r3,r20,1303c <__call_exitprocs+0x98>
   13054:	89000117 	ldw	r4,4(r17)
   13058:	80c00117 	ldw	r3,4(r16)
   1305c:	213fffc4 	addi	r4,r4,-1
   13060:	24800f1e 	bne	r4,r18,130a0 <__call_exitprocs+0xfc>
   13064:	8c800115 	stw	r18,4(r17)
   13068:	183ff426 	beq	r3,zero,1303c <__call_exitprocs+0x98>
   1306c:	8f000117 	ldw	fp,4(r17)
   13070:	98000526 	beq	r19,zero,13088 <__call_exitprocs+0xe4>
   13074:	00800044 	movi	r2,1
   13078:	148c983a 	sll	r6,r2,r18
   1307c:	99004017 	ldw	r4,256(r19)
   13080:	3108703a 	and	r4,r6,r4
   13084:	2000081e 	bne	r4,zero,130a8 <__call_exitprocs+0x104>
   13088:	183ee83a 	callr	r3
   1308c:	89000117 	ldw	r4,4(r17)
   13090:	b0c00d17 	ldw	r3,52(r22)
   13094:	273fd21e 	bne	r4,fp,12fe0 <__call_exitprocs+0x3c>
   13098:	88ffe826 	beq	r17,r3,1303c <__call_exitprocs+0x98>
   1309c:	003fd006 	br	12fe0 <__call_exitprocs+0x3c>
   130a0:	80000115 	stw	zero,4(r16)
   130a4:	003ff006 	br	13068 <__call_exitprocs+0xc4>
   130a8:	99404117 	ldw	r5,260(r19)
   130ac:	b93fff17 	ldw	r4,-4(r23)
   130b0:	314c703a 	and	r6,r6,r5
   130b4:	3000041e 	bne	r6,zero,130c8 <__call_exitprocs+0x124>
   130b8:	200b883a 	mov	r5,r4
   130bc:	a809883a 	mov	r4,r21
   130c0:	183ee83a 	callr	r3
   130c4:	003ff106 	br	1308c <__call_exitprocs+0xe8>
   130c8:	183ee83a 	callr	r3
   130cc:	003fef06 	br	1308c <__call_exitprocs+0xe8>

000130d0 <putc>:
   130d0:	defffd04 	addi	sp,sp,-12
   130d4:	00800074 	movhi	r2,1
   130d8:	dc000115 	stw	r16,4(sp)
   130dc:	dfc00215 	stw	ra,8(sp)
   130e0:	108c5d04 	addi	r2,r2,12660
   130e4:	28800115 	stw	r2,4(r5)
   130e8:	00800074 	movhi	r2,1
   130ec:	d90000c5 	stb	r4,3(sp)
   130f0:	2021883a 	mov	r16,r4
   130f4:	110dfe17 	ldw	r4,14328(r2)
   130f8:	01c00044 	movi	r7,1
   130fc:	d98000c4 	addi	r6,sp,3
   13100:	00131740 	call	13174 <__sfvwrite_small_dev>
   13104:	10ffffe0 	cmpeqi	r3,r2,-1
   13108:	1800011e 	bne	r3,zero,13110 <putc+0x40>
   1310c:	8005883a 	mov	r2,r16
   13110:	dfc00217 	ldw	ra,8(sp)
   13114:	dc000117 	ldw	r16,4(sp)
   13118:	dec00304 	addi	sp,sp,12
   1311c:	f800283a 	ret

00013120 <_putc_r>:
   13120:	defffd04 	addi	sp,sp,-12
   13124:	00800074 	movhi	r2,1
   13128:	dc000115 	stw	r16,4(sp)
   1312c:	dfc00215 	stw	ra,8(sp)
   13130:	108c5d04 	addi	r2,r2,12660
   13134:	30800115 	stw	r2,4(r6)
   13138:	00800074 	movhi	r2,1
   1313c:	110dfe17 	ldw	r4,14328(r2)
   13140:	2821883a 	mov	r16,r5
   13144:	01c00044 	movi	r7,1
   13148:	300b883a 	mov	r5,r6
   1314c:	d98000c4 	addi	r6,sp,3
   13150:	dc0000c5 	stb	r16,3(sp)
   13154:	00131740 	call	13174 <__sfvwrite_small_dev>
   13158:	10ffffe0 	cmpeqi	r3,r2,-1
   1315c:	1800011e 	bne	r3,zero,13164 <_putc_r+0x44>
   13160:	8005883a 	mov	r2,r16
   13164:	dfc00217 	ldw	ra,8(sp)
   13168:	dc000117 	ldw	r16,4(sp)
   1316c:	dec00304 	addi	sp,sp,12
   13170:	f800283a 	ret

00013174 <__sfvwrite_small_dev>:
   13174:	2880000b 	ldhu	r2,0(r5)
   13178:	1080020c 	andi	r2,r2,8
   1317c:	10002526 	beq	r2,zero,13214 <__sfvwrite_small_dev+0xa0>
   13180:	2880008f 	ldh	r2,2(r5)
   13184:	defffb04 	addi	sp,sp,-20
   13188:	dcc00315 	stw	r19,12(sp)
   1318c:	dc800215 	stw	r18,8(sp)
   13190:	dc400115 	stw	r17,4(sp)
   13194:	dc000015 	stw	r16,0(sp)
   13198:	dfc00415 	stw	ra,16(sp)
   1319c:	2027883a 	mov	r19,r4
   131a0:	2821883a 	mov	r16,r5
   131a4:	3025883a 	mov	r18,r6
   131a8:	3823883a 	mov	r17,r7
   131ac:	1000100e 	bge	r2,zero,131f0 <__sfvwrite_small_dev+0x7c>
   131b0:	8080000b 	ldhu	r2,0(r16)
   131b4:	10801014 	ori	r2,r2,64
   131b8:	8080000d 	sth	r2,0(r16)
   131bc:	00bfffc4 	movi	r2,-1
   131c0:	00000d06 	br	131f8 <__sfvwrite_small_dev+0x84>
   131c4:	88810050 	cmplti	r2,r17,1025
   131c8:	880f883a 	mov	r7,r17
   131cc:	1000011e 	bne	r2,zero,131d4 <__sfvwrite_small_dev+0x60>
   131d0:	01c10004 	movi	r7,1024
   131d4:	8140008f 	ldh	r5,2(r16)
   131d8:	900d883a 	mov	r6,r18
   131dc:	9809883a 	mov	r4,r19
   131e0:	001321c0 	call	1321c <_write_r>
   131e4:	00bff20e 	bge	zero,r2,131b0 <__sfvwrite_small_dev+0x3c>
   131e8:	88a3c83a 	sub	r17,r17,r2
   131ec:	90a5883a 	add	r18,r18,r2
   131f0:	047ff416 	blt	zero,r17,131c4 <__sfvwrite_small_dev+0x50>
   131f4:	0005883a 	mov	r2,zero
   131f8:	dfc00417 	ldw	ra,16(sp)
   131fc:	dcc00317 	ldw	r19,12(sp)
   13200:	dc800217 	ldw	r18,8(sp)
   13204:	dc400117 	ldw	r17,4(sp)
   13208:	dc000017 	ldw	r16,0(sp)
   1320c:	dec00504 	addi	sp,sp,20
   13210:	f800283a 	ret
   13214:	00bfffc4 	movi	r2,-1
   13218:	f800283a 	ret

0001321c <_write_r>:
   1321c:	defffe04 	addi	sp,sp,-8
   13220:	dc000015 	stw	r16,0(sp)
   13224:	00800074 	movhi	r2,1
   13228:	2021883a 	mov	r16,r4
   1322c:	2809883a 	mov	r4,r5
   13230:	300b883a 	mov	r5,r6
   13234:	380d883a 	mov	r6,r7
   13238:	dfc00115 	stw	ra,4(sp)
   1323c:	100ed315 	stw	zero,15180(r2)
   13240:	00132e00 	call	132e0 <write>
   13244:	10ffffd8 	cmpnei	r3,r2,-1
   13248:	1800041e 	bne	r3,zero,1325c <_write_r+0x40>
   1324c:	00c00074 	movhi	r3,1
   13250:	18ced317 	ldw	r3,15180(r3)
   13254:	18000126 	beq	r3,zero,1325c <_write_r+0x40>
   13258:	80c00015 	stw	r3,0(r16)
   1325c:	dfc00117 	ldw	ra,4(sp)
   13260:	dc000017 	ldw	r16,0(sp)
   13264:	dec00204 	addi	sp,sp,8
   13268:	f800283a 	ret

0001326c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1326c:	defffd04 	addi	sp,sp,-12
   13270:	df000215 	stw	fp,8(sp)
   13274:	df000204 	addi	fp,sp,8
   13278:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1327c:	0001883a 	nop
   13280:	e0bffe17 	ldw	r2,-8(fp)
   13284:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13288:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1328c:	10000226 	beq	r2,zero,13298 <_exit+0x2c>
    ALT_SIM_FAIL();
   13290:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   13294:	00000106 	br	1329c <_exit+0x30>
    ALT_SIM_PASS();
   13298:	002af0b0 	cmpltui	zero,zero,43970
}
   1329c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   132a0:	003fff06 	br	132a0 <_exit+0x34>

000132a4 <alt_get_errno>:
{
   132a4:	defffe04 	addi	sp,sp,-8
   132a8:	dfc00115 	stw	ra,4(sp)
   132ac:	df000015 	stw	fp,0(sp)
   132b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   132b4:	d0a00717 	ldw	r2,-32740(gp)
   132b8:	10000326 	beq	r2,zero,132c8 <alt_get_errno+0x24>
   132bc:	d0a00717 	ldw	r2,-32740(gp)
   132c0:	103ee83a 	callr	r2
   132c4:	00000106 	br	132cc <alt_get_errno+0x28>
   132c8:	d0a0d604 	addi	r2,gp,-31912
}
   132cc:	e037883a 	mov	sp,fp
   132d0:	dfc00117 	ldw	ra,4(sp)
   132d4:	df000017 	ldw	fp,0(sp)
   132d8:	dec00204 	addi	sp,sp,8
   132dc:	f800283a 	ret

000132e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   132e0:	defff904 	addi	sp,sp,-28
   132e4:	dfc00615 	stw	ra,24(sp)
   132e8:	df000515 	stw	fp,20(sp)
   132ec:	df000504 	addi	fp,sp,20
   132f0:	e13ffd15 	stw	r4,-12(fp)
   132f4:	e17ffc15 	stw	r5,-16(fp)
   132f8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   132fc:	e0bffd17 	ldw	r2,-12(fp)
   13300:	10000616 	blt	r2,zero,1331c <write+0x3c>
   13304:	e0bffd17 	ldw	r2,-12(fp)
   13308:	10c00324 	muli	r3,r2,12
   1330c:	00800074 	movhi	r2,1
   13310:	108d9d04 	addi	r2,r2,13940
   13314:	1885883a 	add	r2,r3,r2
   13318:	00000106 	br	13320 <write+0x40>
   1331c:	0005883a 	mov	r2,zero
   13320:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   13324:	e0bfff17 	ldw	r2,-4(fp)
   13328:	10002126 	beq	r2,zero,133b0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1332c:	e0bfff17 	ldw	r2,-4(fp)
   13330:	10800217 	ldw	r2,8(r2)
   13334:	108000cc 	andi	r2,r2,3
   13338:	10001826 	beq	r2,zero,1339c <write+0xbc>
   1333c:	e0bfff17 	ldw	r2,-4(fp)
   13340:	10800017 	ldw	r2,0(r2)
   13344:	10800617 	ldw	r2,24(r2)
   13348:	10001426 	beq	r2,zero,1339c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1334c:	e0bfff17 	ldw	r2,-4(fp)
   13350:	10800017 	ldw	r2,0(r2)
   13354:	10800617 	ldw	r2,24(r2)
   13358:	e0fffb17 	ldw	r3,-20(fp)
   1335c:	180d883a 	mov	r6,r3
   13360:	e17ffc17 	ldw	r5,-16(fp)
   13364:	e13fff17 	ldw	r4,-4(fp)
   13368:	103ee83a 	callr	r2
   1336c:	e0bffe15 	stw	r2,-8(fp)
   13370:	e0bffe17 	ldw	r2,-8(fp)
   13374:	1000070e 	bge	r2,zero,13394 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13378:	00132a40 	call	132a4 <alt_get_errno>
   1337c:	1007883a 	mov	r3,r2
   13380:	e0bffe17 	ldw	r2,-8(fp)
   13384:	0085c83a 	sub	r2,zero,r2
   13388:	18800015 	stw	r2,0(r3)
        return -1;
   1338c:	00bfffc4 	movi	r2,-1
   13390:	00000c06 	br	133c4 <write+0xe4>
      }
      return rval;
   13394:	e0bffe17 	ldw	r2,-8(fp)
   13398:	00000a06 	br	133c4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1339c:	00132a40 	call	132a4 <alt_get_errno>
   133a0:	1007883a 	mov	r3,r2
   133a4:	00800344 	movi	r2,13
   133a8:	18800015 	stw	r2,0(r3)
   133ac:	00000406 	br	133c0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   133b0:	00132a40 	call	132a4 <alt_get_errno>
   133b4:	1007883a 	mov	r3,r2
   133b8:	00801444 	movi	r2,81
   133bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   133c0:	00bfffc4 	movi	r2,-1
}
   133c4:	e037883a 	mov	sp,fp
   133c8:	dfc00117 	ldw	ra,4(sp)
   133cc:	df000017 	ldw	fp,0(sp)
   133d0:	dec00204 	addi	sp,sp,8
   133d4:	f800283a 	ret
